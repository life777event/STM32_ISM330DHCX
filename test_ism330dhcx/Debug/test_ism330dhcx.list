
test_ism330dhcx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab0  08004ab0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab8  08004ab8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08004acc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004acc  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109f1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000208f  00000000  00000000  00030a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d78  00000000  00000000  00032ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c70  00000000  00000000  00033838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e41f  00000000  00000000  000344a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af6a  00000000  00000000  000528c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bbd75  00000000  00000000  0005d831  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001195a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b4  00000000  00000000  00119624  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a4c 	.word	0x08004a4c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004a4c 	.word	0x08004a4c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 fb1e 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f811 	bl	8000546 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f902 	bl	800072c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000528:	f000 f8b4 	bl	8000694 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800052c:	f000 f872 	bl	8000614 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ISM330DHCX_Init();
 8000530:	f000 fb7e 	bl	8000c30 <HAL_ISM330DHCX_Init>

  HAL_Delay(100);
 8000534:	2064      	movs	r0, #100	; 0x64
 8000536:	f001 fb81 	bl	8001c3c <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	loop();
 800053a:	f000 f98b 	bl	8000854 <loop>
	HAL_Delay(100);
 800053e:	2064      	movs	r0, #100	; 0x64
 8000540:	f001 fb7c 	bl	8001c3c <HAL_Delay>
	loop();
 8000544:	e7f9      	b.n	800053a <main+0x22>

08000546 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b0a4      	sub	sp, #144	; 0x90
 800054a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000550:	2238      	movs	r2, #56	; 0x38
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f004 fa70 	bl	8004a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056a:	463b      	mov	r3, r7
 800056c:	2244      	movs	r2, #68	; 0x44
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f004 fa62 	bl	8004a3a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000576:	2000      	movs	r0, #0
 8000578:	f002 fb72 	bl	8002c60 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000596:	2355      	movs	r3, #85	; 0x55
 8000598:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fc08 	bl	8002dc8 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005be:	f000 f9bb 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005da:	2104      	movs	r1, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 ff0b 	bl	80033f8 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005e8:	f000 f9a6 	bl	8000938 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005ec:	2342      	movs	r3, #66	; 0x42
 80005ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f918 	bl	8003830 <HAL_RCCEx_PeriphCLKConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000606:	f000 f997 	bl	8000938 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3790      	adds	r7, #144	; 0x90
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_I2C1_Init+0x74>)
 800061a:	4a1c      	ldr	r2, [pc, #112]	; (800068c <MX_I2C1_Init+0x78>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_I2C1_Init+0x74>)
 8000620:	4a1b      	ldr	r2, [pc, #108]	; (8000690 <MX_I2C1_Init+0x7c>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_I2C1_Init+0x74>)
 800062c:	2201      	movs	r2, #1
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_I2C1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064e:	480e      	ldr	r0, [pc, #56]	; (8000688 <MX_I2C1_Init+0x74>)
 8000650:	f001 fd94 	bl	800217c <HAL_I2C_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800065a:	f000 f96d 	bl	8000938 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800065e:	2100      	movs	r1, #0
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <MX_I2C1_Init+0x74>)
 8000662:	f002 fa65 	bl	8002b30 <HAL_I2CEx_ConfigAnalogFilter>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800066c:	f000 f964 	bl	8000938 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000670:	2100      	movs	r1, #0
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_I2C1_Init+0x74>)
 8000674:	f002 faa7 	bl	8002bc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800067e:	f000 f95b 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000038 	.word	0x20000038
 800068c:	40005400 	.word	0x40005400
 8000690:	30a0a7fb 	.word	0x30a0a7fb

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <MX_USART2_UART_Init+0x90>)
 800069a:	4a23      	ldr	r2, [pc, #140]	; (8000728 <MX_USART2_UART_Init+0x94>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006dc:	4811      	ldr	r0, [pc, #68]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006de:	f003 fa97 	bl	8003c10 <HAL_UART_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006e8:	f000 f926 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ec:	2100      	movs	r1, #0
 80006ee:	480d      	ldr	r0, [pc, #52]	; (8000724 <MX_USART2_UART_Init+0x90>)
 80006f0:	f004 f88f 	bl	8004812 <HAL_UARTEx_SetTxFifoThreshold>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006fa:	f000 f91d 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fe:	2100      	movs	r1, #0
 8000700:	4808      	ldr	r0, [pc, #32]	; (8000724 <MX_USART2_UART_Init+0x90>)
 8000702:	f004 f8c4 	bl	800488e <HAL_UARTEx_SetRxFifoThreshold>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800070c:	f000 f914 	bl	8000938 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_USART2_UART_Init+0x90>)
 8000712:	f004 f845 	bl	80047a0 <HAL_UARTEx_DisableFifoMode>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800071c:	f000 f90c 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000090 	.word	0x20000090
 8000728:	40004400 	.word	0x40004400

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_GPIO_Init+0x78>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_GPIO_Init+0x78>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_GPIO_Init+0x78>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_GPIO_Init+0x78>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <MX_GPIO_Init+0x78>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_GPIO_Init+0x78>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <MX_GPIO_Init+0x7c>)
 800077a:	f001 fce7 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_GPIO_Init+0x7c>)
 8000798:	f001 fb56 	bl	8001e48 <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000400 	.word	0x48000400

080007ac <ISM330DHCX_sendData>:
 * 	@brief		Send the current data struct to UART
 * 	@param1		Handler for ISM330DHCX
 * 	@param2		Handler for UART
 */
void ISM330DHCX_sendData(ism_data *ism_d, UART_HandleTypeDef *huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	  // Start UART sequence with "S"
	  HAL_UART_Transmit(&huart2, (uint8_t*)"S", sizeof("S"), 50);
 80007b6:	2332      	movs	r3, #50	; 0x32
 80007b8:	2202      	movs	r2, #2
 80007ba:	490e      	ldr	r1, [pc, #56]	; (80007f4 <ISM330DHCX_sendData+0x48>)
 80007bc:	480e      	ldr	r0, [pc, #56]	; (80007f8 <ISM330DHCX_sendData+0x4c>)
 80007be:	f003 fa77 	bl	8003cb0 <HAL_UART_Transmit>
	  // Create a char buffer of right size
	  char buffer[sizeof(float)*7];
	  // Copy and convert the data
	  memcpy(buffer, ism_d, sizeof(float)*7);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	221c      	movs	r2, #28
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 f92a 	bl	8004a24 <memcpy>
	  // Transmit to UART
	  HAL_UART_Transmit(huart, (uint8_t *)buffer, sizeof(buffer), 50);
 80007d0:	f107 010c 	add.w	r1, r7, #12
 80007d4:	2332      	movs	r3, #50	; 0x32
 80007d6:	221c      	movs	r2, #28
 80007d8:	6838      	ldr	r0, [r7, #0]
 80007da:	f003 fa69 	bl	8003cb0 <HAL_UART_Transmit>
	  // End sequence with "Z"
	  HAL_UART_Transmit(&huart2, (uint8_t*)"Z", sizeof("Z"), 50);
 80007de:	2332      	movs	r3, #50	; 0x32
 80007e0:	2202      	movs	r2, #2
 80007e2:	4906      	ldr	r1, [pc, #24]	; (80007fc <ISM330DHCX_sendData+0x50>)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <ISM330DHCX_sendData+0x4c>)
 80007e6:	f003 fa63 	bl	8003cb0 <HAL_UART_Transmit>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	08004a64 	.word	0x08004a64
 80007f8:	20000090 	.word	0x20000090
 80007fc:	08004a68 	.word	0x08004a68

08000800 <ISM330DHCX_sendConf>:
 * 	@brief:		Send the current configuration struct to UART
 * 	@param1:	Handler for ISM330DHCX
 * 	@param2:	Handler for UART
 */
void ISM330DHCX_sendConf(ism_conf *ism_c, UART_HandleTypeDef *huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	// Start sequence with "C"
	HAL_UART_Transmit(&huart2, (uint8_t*)"C", sizeof("C"), 50);
 800080a:	2332      	movs	r3, #50	; 0x32
 800080c:	2202      	movs	r2, #2
 800080e:	490e      	ldr	r1, [pc, #56]	; (8000848 <ISM330DHCX_sendConf+0x48>)
 8000810:	480e      	ldr	r0, [pc, #56]	; (800084c <ISM330DHCX_sendConf+0x4c>)
 8000812:	f003 fa4d 	bl	8003cb0 <HAL_UART_Transmit>
	// Create a char buffer of right size
	char buffer[sizeof(uint8_t)*6];
	// Copy and convert the data
	memcpy(buffer, ism_c, sizeof(uint8_t)*6);
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	6810      	ldr	r0, [r2, #0]
 800081e:	6018      	str	r0, [r3, #0]
 8000820:	8892      	ldrh	r2, [r2, #4]
 8000822:	809a      	strh	r2, [r3, #4]
	// Transmit to UART
	HAL_UART_Transmit(huart, (uint8_t *)buffer, sizeof(buffer), 50);
 8000824:	f107 0108 	add.w	r1, r7, #8
 8000828:	2332      	movs	r3, #50	; 0x32
 800082a:	2206      	movs	r2, #6
 800082c:	6838      	ldr	r0, [r7, #0]
 800082e:	f003 fa3f 	bl	8003cb0 <HAL_UART_Transmit>
	// End sequence with "Z"
	HAL_UART_Transmit(&huart2, (uint8_t*)"Z", sizeof("Z"), 50);
 8000832:	2332      	movs	r3, #50	; 0x32
 8000834:	2202      	movs	r2, #2
 8000836:	4906      	ldr	r1, [pc, #24]	; (8000850 <ISM330DHCX_sendConf+0x50>)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <ISM330DHCX_sendConf+0x4c>)
 800083a:	f003 fa39 	bl	8003cb0 <HAL_UART_Transmit>
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	08004a6c 	.word	0x08004a6c
 800084c:	20000090 	.word	0x20000090
 8000850:	08004a68 	.word	0x08004a68

08000854 <loop>:
/*	Loop function
 *
 * 	@brief:	Catch UART command and Process the associated function
 */
void loop()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
	uint8_t rx_buff = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if(HAL_UART_Receive(&huart2,&rx_buff,1,5000) == HAL_OK)
 8000860:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8000864:	f241 3388 	movw	r3, #5000	; 0x1388
 8000868:	2201      	movs	r2, #1
 800086a:	4832      	ldr	r0, [pc, #200]	; (8000934 <loop+0xe0>)
 800086c:	f003 fab6 	bl	8003ddc <HAL_UART_Receive>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d11e      	bne.n	80008b4 <loop+0x60>
	{
		switch(rx_buff)
 8000876:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800087a:	2b43      	cmp	r3, #67	; 0x43
 800087c:	d002      	beq.n	8000884 <loop+0x30>
 800087e:	2b53      	cmp	r3, #83	; 0x53
 8000880:	d00d      	beq.n	800089e <loop+0x4a>
				// Send structure to uart
				ISM330DHCX_sendData(&ism_d, &huart2);
				break;
			}
			default:
				break;
 8000882:	e053      	b.n	800092c <loop+0xd8>
				HAL_ISM330DHCX_getConf(&ism_c);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fa1d 	bl	8000cc8 <HAL_ISM330DHCX_getConf>
				ISM330DHCX_sendConf(&ism_c, &huart2);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4928      	ldr	r1, [pc, #160]	; (8000934 <loop+0xe0>)
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ffb3 	bl	8000800 <ISM330DHCX_sendConf>
				break;
 800089a:	bf00      	nop
 800089c:	e046      	b.n	800092c <loop+0xd8>
				HAL_ISM330DHCX_Poll(&ism_d);
 800089e:	463b      	mov	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fa4d 	bl	8000d40 <HAL_ISM330DHCX_Poll>
				ISM330DHCX_sendData(&ism_d, &huart2);
 80008a6:	463b      	mov	r3, r7
 80008a8:	4922      	ldr	r1, [pc, #136]	; (8000934 <loop+0xe0>)
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff7e 	bl	80007ac <ISM330DHCX_sendData>
				break;
 80008b0:	bf00      	nop
 80008b2:	e03b      	b.n	800092c <loop+0xd8>
		}
	}
	else
	{
		uint8_t rx = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <loop+0xe0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 0320 	and.w	r3, r3, #32
 80008be:	2b20      	cmp	r3, #32
 80008c0:	bf0c      	ite	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	2300      	movne	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t or = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE);
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <loop+0xe0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	2b08      	cmp	r3, #8
 80008d8:	bf0c      	ite	eq
 80008da:	2301      	moveq	r3, #1
 80008dc:	2300      	movne	r3, #0
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t ne = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_NE);
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <loop+0xe0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t fe = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE);
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <loop+0xe0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b02      	cmp	r3, #2
 8000908:	bf0c      	ite	eq
 800090a:	2301      	moveq	r3, #1
 800090c:	2300      	movne	r3, #0
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t pe = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_PE);
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <loop+0xe0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	2b01      	cmp	r3, #1
 8000920:	bf0c      	ite	eq
 8000922:	2301      	moveq	r3, #1
 8000924:	2300      	movne	r3, #0
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000090 	.word	0x20000090

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000942:	4802      	ldr	r0, [pc, #8]	; (800094c <Error_Handler+0x14>)
 8000944:	f001 fc02 	bl	800214c <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	48000400 	.word	0x48000400

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x44>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_MspInit+0x44>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6613      	str	r3, [r2, #96]	; 0x60
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x44>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x44>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6593      	str	r3, [r2, #88]	; 0x58
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000986:	f002 fa0f 	bl	8002da8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <HAL_I2C_MspInit+0xb8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d145      	bne.n	8000a46 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b26      	ldr	r3, [pc, #152]	; (8000a54 <HAL_I2C_MspInit+0xbc>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a25      	ldr	r2, [pc, #148]	; (8000a54 <HAL_I2C_MspInit+0xbc>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <HAL_I2C_MspInit+0xbc>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <HAL_I2C_MspInit+0xbc>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <HAL_I2C_MspInit+0xbc>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <HAL_I2C_MspInit+0xbc>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0a:	f001 fa1d 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a12:	2312      	movs	r3, #18
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <HAL_I2C_MspInit+0xc0>)
 8000a2a:	f001 fa0d 	bl	8001e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_I2C_MspInit+0xbc>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_I2C_MspInit+0xbc>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a38:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_I2C_MspInit+0xbc>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40005400 	.word	0x40005400
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48000400 	.word	0x48000400

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <HAL_UART_MspInit+0x7c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d128      	bne.n	8000ad0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_UART_MspInit+0x80>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f001 f9bc 	bl	8001e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40004400 	.word	0x40004400
 8000adc:	40021000 	.word	0x40021000

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b34:	f001 f864 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <SystemInit+0x28>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <SystemInit+0x28>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SystemInit+0x28>)
 8000b52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b56:	609a      	str	r2, [r3, #8]
#endif
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0b      	ldr	r4, [pc, #44]	; (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b92:	f7ff ffd3 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b96:	f003 ff21 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9a:	f7ff fcbd 	bl	8000518 <main>

08000b9e <LoopForever>:

LoopForever:
    b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
  ldr   r0, =_estack
 8000ba0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bac:	08004ac0 	.word	0x08004ac0
  ldr r2, =_sbss
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb4:	20000124 	.word	0x20000124

08000bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_2_IRQHandler>

08000bba <HAL_ISM330DHCX_Write>:
  * @param3 	Pointer to the buffer that contains the data to write
  * @param4		Length of the buffer of @param3
  * @retval 	HAL status
  */
int32_t HAL_ISM330DHCX_Write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b088      	sub	sp, #32
 8000bbe:	af04      	add	r7, sp, #16
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	72fb      	strb	r3, [r7, #11]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Write(handle, ISM3320DHCX_I2C_ADD_L_W, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8000bce:	7afb      	ldrb	r3, [r7, #11]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd6:	9302      	str	r3, [sp, #8]
 8000bd8:	893b      	ldrh	r3, [r7, #8]
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2301      	movs	r3, #1
 8000be2:	21d4      	movs	r1, #212	; 0xd4
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f001 fb59 	bl	800229c <HAL_I2C_Mem_Write>
 8000bea:	4603      	mov	r3, r0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_ISM330DHCX_Read>:
  * @param3 	Pointer to the buffer that'll store the data
  * @param4		Expected length of data to be received
  * @retval 	HAL status
  */
int32_t HAL_ISM330DHCX_Read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	460b      	mov	r3, r1
 8000c02:	72fb      	strb	r3, [r7, #11]
 8000c04:	4613      	mov	r3, r2
 8000c06:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(handle, ISM3320DHCX_I2C_ADD_L_R, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8000c08:	7afb      	ldrb	r3, [r7, #11]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	893b      	ldrh	r3, [r7, #8]
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	21d5      	movs	r1, #213	; 0xd5
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	f001 fc50 	bl	80024c4 <HAL_I2C_Mem_Read>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_ISM330DHCX_Init>:
  * @brief 		ISM330DHCX Initialization function
  * @param		None
  * @retval 	None
  */
void HAL_ISM330DHCX_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	/* Fill the ISM330DHCX Handler */
	hism330.write 	= HAL_ISM330DHCX_Write;
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c36:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <HAL_ISM330DHCX_Init+0x84>)
 8000c38:	601a      	str	r2, [r3, #0]
	hism330.read 	= HAL_ISM330DHCX_Read;
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c3c:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <HAL_ISM330DHCX_Init+0x88>)
 8000c3e:	605a      	str	r2, [r3, #4]
	hism330.handle	= &hi2c1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c42:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <HAL_ISM330DHCX_Init+0x8c>)
 8000c44:	609a      	str	r2, [r3, #8]

	/* Check device ID */
	ism330dhcx_who_am_i(&hism330, &whoamI);
 8000c46:	491e      	ldr	r1, [pc, #120]	; (8000cc0 <HAL_ISM330DHCX_Init+0x90>)
 8000c48:	4819      	ldr	r0, [pc, #100]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c4a:	f000 f93b 	bl	8000ec4 <ism330dhcx_who_am_i>
	if (whoamI != ISM3320DHCX_WHO_AM_I)
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_ISM330DHCX_Init+0x90>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b6b      	cmp	r3, #107	; 0x6b
 8000c54:	d001      	beq.n	8000c5a <HAL_ISM330DHCX_Init+0x2a>
	{
		Error_Handler();
 8000c56:	f7ff fe6f 	bl	8000938 <Error_Handler>
	}

	/* Restore default configuration */
	ism330dhcx_reset_set(&hism330, PROPERTY_ENABLE);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c5e:	f000 f942 	bl	8000ee6 <ism330dhcx_reset_set>
	do
	{
	    ism330dhcx_reset_get(&hism330, &rst);
 8000c62:	4918      	ldr	r1, [pc, #96]	; (8000cc4 <HAL_ISM330DHCX_Init+0x94>)
 8000c64:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c66:	f000 f964 	bl	8000f32 <ism330dhcx_reset_get>
	} while (rst);
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_ISM330DHCX_Init+0x94>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f7      	bne.n	8000c62 <HAL_ISM330DHCX_Init+0x32>

	/* Enable Block Data Update */
	ism330dhcx_block_data_update_set(&hism330, PROPERTY_ENABLE);
 8000c72:	2101      	movs	r1, #1
 8000c74:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c76:	f000 f975 	bl	8000f64 <ism330dhcx_block_data_update_set>
	/* Set Output Data Rate */
	ism330dhcx_xl_data_rate_set(&hism330, ISM330DHCX_XL_ODR_12Hz5);
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c7e:	f000 f997 	bl	8000fb0 <ism330dhcx_xl_data_rate_set>
	ism330dhcx_gy_data_rate_set(&hism330, ISM330DHCX_GY_ODR_12Hz5);
 8000c82:	2101      	movs	r1, #1
 8000c84:	480a      	ldr	r0, [pc, #40]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c86:	f000 fb03 	bl	8001290 <ism330dhcx_gy_data_rate_set>
	/* Set full scale */
	ism330dhcx_xl_full_scale_set(&hism330, ISM330DHCX_2g);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c8e:	f000 fc6f 	bl	8001570 <ism330dhcx_xl_full_scale_set>
	ism330dhcx_gy_full_scale_set(&hism330, ISM330DHCX_2000dps);
 8000c92:	2103      	movs	r1, #3
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c96:	f000 fc91 	bl	80015bc <ism330dhcx_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	 *
	 * Accelerometer - LPF1 + LPF2 path
	 */
	ism330dhcx_xl_hp_path_on_out_set(&hism330, ISM330DHCX_LP_ODR_DIV_100);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000c9e:	f000 fcb5 	bl	800160c <ism330dhcx_xl_hp_path_on_out_set>
	ism330dhcx_xl_filter_lp2_set(&hism330, PROPERTY_ENABLE);
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <HAL_ISM330DHCX_Init+0x80>)
 8000ca6:	f000 fce9 	bl	800167c <ism330dhcx_xl_filter_lp2_set>

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000084 	.word	0x20000084
 8000cb4:	08000bbb 	.word	0x08000bbb
 8000cb8:	08000bf5 	.word	0x08000bf5
 8000cbc:	20000038 	.word	0x20000038
 8000cc0:	2000011c 	.word	0x2000011c
 8000cc4:	2000011d 	.word	0x2000011d

08000cc8 <HAL_ISM330DHCX_getConf>:

void HAL_ISM330DHCX_getConf(ism_conf* ism_c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	  ism330dhcx_ctrl1_xl_t ctrl1_xl;
	  ism330dhcx_ctrl2_g_t ctrl2_g;
	  ism330dhcx_ctrl3_ois_t ctrl3_ois;

	  //Contient XL_RATE_SET
	  ism330dhcx_read(&hism330, CTRL1_XL,
 8000cd0:	f107 0214 	add.w	r2, r7, #20
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <HAL_ISM330DHCX_getConf+0x74>)
 8000cda:	f000 f8c3 	bl	8000e64 <ism330dhcx_read>
                            (uint8_t *)&ctrl1_xl, 1);
	  //Contient GY_RATE_SET et GY_FULL_SCALE
	  ism330dhcx_read(&hism330, CTRL2_G,
 8000cde:	f107 0210 	add.w	r2, r7, #16
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	2111      	movs	r1, #17
 8000ce6:	4815      	ldr	r0, [pc, #84]	; (8000d3c <HAL_ISM330DHCX_getConf+0x74>)
 8000ce8:	f000 f8bc 	bl	8000e64 <ism330dhcx_read>
	                                (uint8_t *)&ctrl2_g, 1);
	  //Contient XL_FULL_SCALE
	  ism330dhcx_read(&hism330, CTRL3_OIS,
 8000cec:	f107 020c 	add.w	r2, r7, #12
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	2172      	movs	r1, #114	; 0x72
 8000cf4:	4811      	ldr	r0, [pc, #68]	; (8000d3c <HAL_ISM330DHCX_getConf+0x74>)
 8000cf6:	f000 f8b5 	bl	8000e64 <ism330dhcx_read>
	                              (uint8_t *)&ctrl3_ois, 1);

	  ism_c->acc_data_rate 	= (uint8_t)ctrl1_xl.odr_xl;
 8000cfa:	7d3b      	ldrb	r3, [r7, #20]
 8000cfc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	701a      	strb	r2, [r3, #0]
	  ism_c->gyr_data_rate	= (uint8_t)ctrl2_g.odr_g;
 8000d08:	7c3b      	ldrb	r3, [r7, #16]
 8000d0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	705a      	strb	r2, [r3, #1]
	  ism_c->acc_full_scale	= (uint8_t)ctrl3_ois.fs_xl_ois;
 8000d16:	7b3b      	ldrb	r3, [r7, #12]
 8000d18:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	709a      	strb	r2, [r3, #2]
	  ism_c->gyr_full_scale 	= (uint8_t)ctrl2_g.fs_g;
 8000d24:	7c3b      	ldrb	r3, [r7, #16]
 8000d26:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	70da      	strb	r2, [r3, #3]
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000084 	.word	0x20000084

08000d40 <HAL_ISM330DHCX_Poll>:

void HAL_ISM330DHCX_Poll(ism_data* ism_d)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	/* Read samples in polling mode (no int) */
	uint8_t reg;
	/* Read output only if new xl value is available */
	ism330dhcx_xl_flag_data_ready_get(&hism330, &reg);
 8000d48:	f107 030f 	add.w	r3, r7, #15
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4841      	ldr	r0, [pc, #260]	; (8000e54 <HAL_ISM330DHCX_Poll+0x114>)
 8000d50:	f000 fcba 	bl	80016c8 <ism330dhcx_xl_flag_data_ready_get>

	if (reg) {
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d029      	beq.n	8000dae <HAL_ISM330DHCX_Poll+0x6e>
		/* Read acceleration field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8000d5a:	2206      	movs	r2, #6
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	483e      	ldr	r0, [pc, #248]	; (8000e58 <HAL_ISM330DHCX_Poll+0x118>)
 8000d60:	f003 fe6b 	bl	8004a3a <memset>
		ism330dhcx_acceleration_raw_get(&hism330, (int16_t*)data_raw_acceleration);
 8000d64:	493c      	ldr	r1, [pc, #240]	; (8000e58 <HAL_ISM330DHCX_Poll+0x118>)
 8000d66:	483b      	ldr	r0, [pc, #236]	; (8000e54 <HAL_ISM330DHCX_Poll+0x114>)
 8000d68:	f000 fcc7 	bl	80016fa <ism330dhcx_acceleration_raw_get>
		ism_d->acceleration_mg[0] =
				ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[0]);
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <HAL_ISM330DHCX_Poll+0x118>)
 8000d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 fe96 	bl	8001aa4 <ism330dhcx_from_fs2g_to_mg>
 8000d78:	eef0 7a40 	vmov.f32	s15, s0
		ism_d->acceleration_mg[0] =
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	edc3 7a00 	vstr	s15, [r3]
		ism_d->acceleration_mg[1] =
				ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[1]);
 8000d82:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <HAL_ISM330DHCX_Poll+0x118>)
 8000d84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fe8b 	bl	8001aa4 <ism330dhcx_from_fs2g_to_mg>
 8000d8e:	eef0 7a40 	vmov.f32	s15, s0
		ism_d->acceleration_mg[1] =
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	edc3 7a01 	vstr	s15, [r3, #4]
		ism_d->acceleration_mg[2] =
				ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[2]);
 8000d98:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <HAL_ISM330DHCX_Poll+0x118>)
 8000d9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fe80 	bl	8001aa4 <ism330dhcx_from_fs2g_to_mg>
 8000da4:	eef0 7a40 	vmov.f32	s15, s0
		ism_d->acceleration_mg[2] =
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edc3 7a02 	vstr	s15, [r3, #8]
	}

	ism330dhcx_gy_flag_data_ready_get(&hism330, &reg);
 8000dae:	f107 030f 	add.w	r3, r7, #15
 8000db2:	4619      	mov	r1, r3
 8000db4:	4827      	ldr	r0, [pc, #156]	; (8000e54 <HAL_ISM330DHCX_Poll+0x114>)
 8000db6:	f000 fcda 	bl	800176e <ism330dhcx_gy_flag_data_ready_get>

	if (reg) {
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d029      	beq.n	8000e14 <HAL_ISM330DHCX_Poll+0xd4>
		/* Read angular rate field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8000dc0:	2206      	movs	r2, #6
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4825      	ldr	r0, [pc, #148]	; (8000e5c <HAL_ISM330DHCX_Poll+0x11c>)
 8000dc6:	f003 fe38 	bl	8004a3a <memset>
		ism330dhcx_angular_rate_raw_get(&hism330, (int16_t*)data_raw_angular_rate);
 8000dca:	4924      	ldr	r1, [pc, #144]	; (8000e5c <HAL_ISM330DHCX_Poll+0x11c>)
 8000dcc:	4821      	ldr	r0, [pc, #132]	; (8000e54 <HAL_ISM330DHCX_Poll+0x114>)
 8000dce:	f000 fce7 	bl	80017a0 <ism330dhcx_angular_rate_raw_get>
		ism_d->angular_rate_mdps[0] =
				ism330dhcx_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_ISM330DHCX_Poll+0x11c>)
 8000dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fe83 	bl	8001ae4 <ism330dhcx_from_fs2000dps_to_mdps>
 8000dde:	eef0 7a40 	vmov.f32	s15, s0
		ism_d->angular_rate_mdps[0] =
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	edc3 7a03 	vstr	s15, [r3, #12]
		ism_d->angular_rate_mdps[1] =
				ism330dhcx_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_ISM330DHCX_Poll+0x11c>)
 8000dea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fe78 	bl	8001ae4 <ism330dhcx_from_fs2000dps_to_mdps>
 8000df4:	eef0 7a40 	vmov.f32	s15, s0
		ism_d->angular_rate_mdps[1] =
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	edc3 7a04 	vstr	s15, [r3, #16]
		ism_d->angular_rate_mdps[2] =
				ism330dhcx_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_ISM330DHCX_Poll+0x11c>)
 8000e00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 fe6d 	bl	8001ae4 <ism330dhcx_from_fs2000dps_to_mdps>
 8000e0a:	eef0 7a40 	vmov.f32	s15, s0
		ism_d->angular_rate_mdps[2] =
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	ism330dhcx_temp_flag_data_ready_get(&hism330, &reg);
 8000e14:	f107 030f 	add.w	r3, r7, #15
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <HAL_ISM330DHCX_Poll+0x114>)
 8000e1c:	f000 fcfa 	bl	8001814 <ism330dhcx_temp_flag_data_ready_get>

	if (reg) {
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d011      	beq.n	8000e4a <HAL_ISM330DHCX_Poll+0x10a>
		/* Read temperature data */
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_ISM330DHCX_Poll+0x120>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
		ism330dhcx_temperature_raw_get(&hism330, &data_raw_temperature);
 8000e2c:	490c      	ldr	r1, [pc, #48]	; (8000e60 <HAL_ISM330DHCX_Poll+0x120>)
 8000e2e:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_ISM330DHCX_Poll+0x114>)
 8000e30:	f000 fd09 	bl	8001846 <ism330dhcx_temperature_raw_get>
		ism_d->temperature_degC = ism330dhcx_from_lsb_to_celsius(
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <HAL_ISM330DHCX_Poll+0x120>)
 8000e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fe72 	bl	8001b24 <ism330dhcx_from_lsb_to_celsius>
 8000e40:	eef0 7a40 	vmov.f32	s15, s0
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	edc3 7a06 	vstr	s15, [r3, #24]
				data_raw_temperature);
	}

}
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000084 	.word	0x20000084
 8000e58:	20000028 	.word	0x20000028
 8000e5c:	20000030 	.word	0x20000030
 8000e60:	20000036 	.word	0x20000036

08000e64 <ism330dhcx_read>:
  *
  */
int32_t ism330dhcx_read(ISM330DHCX_HandleTypeDef *h_ism, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	460b      	mov	r3, r1
 8000e72:	72fb      	strb	r3, [r7, #11]
 8000e74:	4613      	mov	r3, r2
 8000e76:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = h_ism->read(h_ism->handle, reg, data, len);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	685c      	ldr	r4, [r3, #4]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6898      	ldr	r0, [r3, #8]
 8000e80:	893b      	ldrh	r3, [r7, #8]
 8000e82:	7af9      	ldrb	r1, [r7, #11]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	47a0      	blx	r4
 8000e88:	6178      	str	r0, [r7, #20]
  return ret;
 8000e8a:	697b      	ldr	r3, [r7, #20]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	371c      	adds	r7, #28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}

08000e94 <ism330dhcx_write>:
  *
  */
int32_t ism330dhcx_write(ISM330DHCX_HandleTypeDef *h_ism, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	72fb      	strb	r3, [r7, #11]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = h_ism->write(h_ism->handle, reg, data, len);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681c      	ldr	r4, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	6898      	ldr	r0, [r3, #8]
 8000eb0:	893b      	ldrh	r3, [r7, #8]
 8000eb2:	7af9      	ldrb	r1, [r7, #11]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	47a0      	blx	r4
 8000eb8:	6178      	str	r0, [r7, #20]
  return ret;
 8000eba:	697b      	ldr	r3, [r7, #20]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd90      	pop	{r4, r7, pc}

08000ec4 <ism330dhcx_who_am_i>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_who_am_i(ISM330DHCX_HandleTypeDef *h_ism, uint8_t *buff)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
    int32_t ret;
    ret = ism330dhcx_read(h_ism, WHO_AM_I, buff, 1);
 8000ece:	2301      	movs	r3, #1
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ffc5 	bl	8000e64 <ism330dhcx_read>
 8000eda:	60f8      	str	r0, [r7, #12]
    return ret;
 8000edc:	68fb      	ldr	r3, [r7, #12]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(ISM330DHCX_HandleTypeDef *h_ism, uint8_t val)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b084      	sub	sp, #16
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read(h_ism, CTRL2_G,
 8000ef2:	f107 0208 	add.w	r2, r7, #8
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	2111      	movs	r1, #17
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffb2 	bl	8000e64 <ism330dhcx_read>
 8000f00:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10f      	bne.n	8000f28 <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	7a3b      	ldrb	r3, [r7, #8]
 8000f12:	f362 0300 	bfi	r3, r2, #0, #1
 8000f16:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write(h_ism, CTRL3_C,
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	2112      	movs	r1, #18
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ffb7 	bl	8000e94 <ism330dhcx_write>
 8000f26:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8000f28:	68fb      	ldr	r3, [r7, #12]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <ism330dhcx_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_get(ISM330DHCX_HandleTypeDef *h_ism, uint8_t *val)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read(h_ism, CTRL3_C,
 8000f3c:	f107 0208 	add.w	r2, r7, #8
 8000f40:	2301      	movs	r3, #1
 8000f42:	2112      	movs	r1, #18
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff8d 	bl	8000e64 <ism330dhcx_read>
 8000f4a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8000f4c:	7a3b      	ldrb	r3, [r7, #8]
 8000f4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	701a      	strb	r2, [r3, #0]
  return ret;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <ism330dhcx_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(ISM330DHCX_HandleTypeDef *h_ism, uint8_t val)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read(h_ism, CTRL3_C,
 8000f70:	f107 0208 	add.w	r2, r7, #8
 8000f74:	2301      	movs	r3, #1
 8000f76:	2112      	movs	r1, #18
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff73 	bl	8000e64 <ism330dhcx_read>
 8000f7e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	7a3b      	ldrb	r3, [r7, #8]
 8000f90:	f362 1386 	bfi	r3, r2, #6, #1
 8000f94:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write(h_ism, CTRL3_C,
 8000f96:	f107 0208 	add.w	r2, r7, #8
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	2112      	movs	r1, #18
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff78 	bl	8000e94 <ism330dhcx_write>
 8000fa4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <ism330dhcx_xl_data_rate_set>:

/* Set Output Data Update */
int32_t ism330dhcx_xl_data_rate_set(ISM330DHCX_HandleTypeDef *h_ism, ism330dhcx_odr_xl_t val)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
    ism330dhcx_odr_xl_t odr_xl =  val;
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	75fb      	strb	r3, [r7, #23]
    uint8_t mlc_enable;
    ism330dhcx_mlc_odr_t mlc_odr;
    ism330dhcx_ctrl1_xl_t ctrl1_xl;
    int32_t ret;
    /* Check the Finite State Machine data rate constraints */
    ret =  ism330dhcx_fsm_enable_get(h_ism, &fsm_enable);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 fc60 	bl	800188c <ism330dhcx_fsm_enable_get>
 8000fcc:	6138      	str	r0, [r7, #16]

    if (ret == 0) {
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 80c4 	bne.w	800115e <ism330dhcx_xl_data_rate_set+0x1ae>
        if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8000fd6:	7b3b      	ldrb	r3, [r7, #12]
 8000fd8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000fdc:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_a.fsm2_en  |
 8000fde:	7b3b      	ldrb	r3, [r7, #12]
 8000fe0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000fe4:	b2db      	uxtb	r3, r3
        if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_a.fsm3_en  |
 8000fea:	7b3b      	ldrb	r3, [r7, #12]
 8000fec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ff0:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_a.fsm2_en  |
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_a.fsm4_en  |
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000ffc:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_a.fsm3_en  |
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_a.fsm5_en  |
 8001002:	7b3b      	ldrb	r3, [r7, #12]
 8001004:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001008:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_a.fsm4_en  |
 800100a:	4313      	orrs	r3, r2
 800100c:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_a.fsm6_en  |
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001014:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_a.fsm5_en  |
 8001016:	4313      	orrs	r3, r2
 8001018:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_a.fsm7_en  |
 800101a:	7b3b      	ldrb	r3, [r7, #12]
 800101c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001020:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_a.fsm6_en  |
 8001022:	4313      	orrs	r3, r2
 8001024:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_a.fsm8_en  |
 8001026:	7b3b      	ldrb	r3, [r7, #12]
 8001028:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800102c:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_a.fsm7_en  |
 800102e:	4313      	orrs	r3, r2
 8001030:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_b.fsm9_en  |
 8001032:	7b7b      	ldrb	r3, [r7, #13]
 8001034:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001038:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_a.fsm8_en  |
 800103a:	4313      	orrs	r3, r2
 800103c:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_b.fsm10_en |
 800103e:	7b7b      	ldrb	r3, [r7, #13]
 8001040:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001044:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_b.fsm9_en  |
 8001046:	4313      	orrs	r3, r2
 8001048:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_b.fsm11_en |
 800104a:	7b7b      	ldrb	r3, [r7, #13]
 800104c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001050:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_b.fsm10_en |
 8001052:	4313      	orrs	r3, r2
 8001054:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_b.fsm12_en |
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800105c:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_b.fsm11_en |
 800105e:	4313      	orrs	r3, r2
 8001060:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_b.fsm13_en |
 8001062:	7b7b      	ldrb	r3, [r7, #13]
 8001064:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001068:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_b.fsm12_en |
 800106a:	4313      	orrs	r3, r2
 800106c:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_b.fsm14_en |
 800106e:	7b7b      	ldrb	r3, [r7, #13]
 8001070:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001074:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_b.fsm13_en |
 8001076:	4313      	orrs	r3, r2
 8001078:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_b.fsm15_en |
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001080:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_b.fsm14_en |
 8001082:	4313      	orrs	r3, r2
 8001084:	b2da      	uxtb	r2, r3
            fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE )
 8001086:	7b7b      	ldrb	r3, [r7, #13]
 8001088:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800108c:	b2db      	uxtb	r3, r3
            fsm_enable.fsm_enable_b.fsm15_en |
 800108e:	4313      	orrs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
        if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001092:	2b01      	cmp	r3, #1
 8001094:	d163      	bne.n	800115e <ism330dhcx_xl_data_rate_set+0x1ae>
        {
			ret =  ism330dhcx_fsm_data_rate_get(h_ism, &fsm_odr);
 8001096:	f107 030b 	add.w	r3, r7, #11
 800109a:	4619      	mov	r1, r3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fc47 	bl	8001930 <ism330dhcx_fsm_data_rate_get>
 80010a2:	6138      	str	r0, [r7, #16]

			if (ret == 0) {
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d159      	bne.n	800115e <ism330dhcx_xl_data_rate_set+0x1ae>
				switch (fsm_odr) {
 80010aa:	7afb      	ldrb	r3, [r7, #11]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d853      	bhi.n	8001158 <ism330dhcx_xl_data_rate_set+0x1a8>
 80010b0:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <ism330dhcx_xl_data_rate_set+0x108>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	080010db 	.word	0x080010db
 80010c0:	080010f9 	.word	0x080010f9
 80010c4:	08001123 	.word	0x08001123
				case ISM330DHCX_ODR_FSM_12Hz5:
					if (val == ISM330DHCX_XL_ODR_OFF) {
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <ism330dhcx_xl_data_rate_set+0x124>
					odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]

					else {
					odr_xl = val;
					}

					break;
 80010d2:	e045      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					odr_xl = val;
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	75fb      	strb	r3, [r7, #23]
					break;
 80010d8:	e042      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>

				case ISM330DHCX_ODR_FSM_26Hz:
					if (val == ISM330DHCX_XL_ODR_OFF) {
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <ism330dhcx_xl_data_rate_set+0x136>
					odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80010e0:	2302      	movs	r3, #2
 80010e2:	75fb      	strb	r3, [r7, #23]

					else {
					odr_xl = val;
					}

					break;
 80010e4:	e03c      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d102      	bne.n	80010f2 <ism330dhcx_xl_data_rate_set+0x142>
					odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80010ec:	2302      	movs	r3, #2
 80010ee:	75fb      	strb	r3, [r7, #23]
					break;
 80010f0:	e036      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					odr_xl = val;
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	75fb      	strb	r3, [r7, #23]
					break;
 80010f6:	e033      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>

				case ISM330DHCX_ODR_FSM_52Hz:
					if (val == ISM330DHCX_XL_ODR_OFF) {
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <ism330dhcx_xl_data_rate_set+0x154>
					odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80010fe:	2303      	movs	r3, #3
 8001100:	75fb      	strb	r3, [r7, #23]

					else {
					odr_xl = val;
					}

					break;
 8001102:	e02d      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d102      	bne.n	8001110 <ism330dhcx_xl_data_rate_set+0x160>
					odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800110a:	2303      	movs	r3, #3
 800110c:	75fb      	strb	r3, [r7, #23]
					break;
 800110e:	e027      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d102      	bne.n	800111c <ism330dhcx_xl_data_rate_set+0x16c>
					odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8001116:	2303      	movs	r3, #3
 8001118:	75fb      	strb	r3, [r7, #23]
					break;
 800111a:	e021      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					odr_xl = val;
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	75fb      	strb	r3, [r7, #23]
					break;
 8001120:	e01e      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>

				case ISM330DHCX_ODR_FSM_104Hz:
					if (val == ISM330DHCX_XL_ODR_OFF) {
 8001122:	78fb      	ldrb	r3, [r7, #3]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <ism330dhcx_xl_data_rate_set+0x17e>
					odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001128:	2304      	movs	r3, #4
 800112a:	75fb      	strb	r3, [r7, #23]

					else {
					odr_xl = val;
					}

					break;
 800112c:	e018      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <ism330dhcx_xl_data_rate_set+0x18a>
					odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001134:	2304      	movs	r3, #4
 8001136:	75fb      	strb	r3, [r7, #23]
					break;
 8001138:	e012      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					else if (val == ISM330DHCX_XL_ODR_26Hz) {
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d102      	bne.n	8001146 <ism330dhcx_xl_data_rate_set+0x196>
					odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001140:	2304      	movs	r3, #4
 8001142:	75fb      	strb	r3, [r7, #23]
					break;
 8001144:	e00c      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d102      	bne.n	8001152 <ism330dhcx_xl_data_rate_set+0x1a2>
					odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800114c:	2304      	movs	r3, #4
 800114e:	75fb      	strb	r3, [r7, #23]
					break;
 8001150:	e006      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
					odr_xl = val;
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	75fb      	strb	r3, [r7, #23]
					break;
 8001156:	e003      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>

				default:
					odr_xl = val;
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	75fb      	strb	r3, [r7, #23]
					break;
 800115c:	e000      	b.n	8001160 <ism330dhcx_xl_data_rate_set+0x1b0>
				}
			}
 800115e:	bf00      	nop
        }
    }

    /* Check the Machine Learning Core data rate constraints */
    mlc_enable = PROPERTY_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	72bb      	strb	r3, [r7, #10]

    if (ret == 0) {
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d16d      	bne.n	8001246 <ism330dhcx_xl_data_rate_set+0x296>
        ret =  ism330dhcx_mlc_get(h_ism, &mlc_enable);
 800116a:	f107 030a 	add.w	r3, r7, #10
 800116e:	4619      	mov	r1, r3
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 fc25 	bl	80019c0 <ism330dhcx_mlc_get>
 8001176:	6138      	str	r0, [r7, #16]

        if ( mlc_enable == PROPERTY_ENABLE ) {
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d163      	bne.n	8001246 <ism330dhcx_xl_data_rate_set+0x296>
        ret =  ism330dhcx_mlc_data_rate_get(h_ism, &mlc_odr);
 800117e:	f107 0309 	add.w	r3, r7, #9
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 fc45 	bl	8001a14 <ism330dhcx_mlc_data_rate_get>
 800118a:	6138      	str	r0, [r7, #16]

        if (ret == 0) {
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d159      	bne.n	8001246 <ism330dhcx_xl_data_rate_set+0x296>
            switch (mlc_odr) {
 8001192:	7a7b      	ldrb	r3, [r7, #9]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d853      	bhi.n	8001240 <ism330dhcx_xl_data_rate_set+0x290>
 8001198:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <ism330dhcx_xl_data_rate_set+0x1f0>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	080011b1 	.word	0x080011b1
 80011a4:	080011c3 	.word	0x080011c3
 80011a8:	080011e1 	.word	0x080011e1
 80011ac:	0800120b 	.word	0x0800120b
            case ISM330DHCX_ODR_PRGS_12Hz5:
                if (val == ISM330DHCX_XL_ODR_OFF) {
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <ism330dhcx_xl_data_rate_set+0x20c>
                odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80011b6:	2301      	movs	r3, #1
 80011b8:	75fb      	strb	r3, [r7, #23]

                else {
                odr_xl = val;
                }

                break;
 80011ba:	e045      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                odr_xl = val;
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	75fb      	strb	r3, [r7, #23]
                break;
 80011c0:	e042      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>

            case ISM330DHCX_ODR_PRGS_26Hz:
                if (val == ISM330DHCX_XL_ODR_OFF) {
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <ism330dhcx_xl_data_rate_set+0x21e>
                odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80011c8:	2302      	movs	r3, #2
 80011ca:	75fb      	strb	r3, [r7, #23]

                else {
                odr_xl = val;
                }

                break;
 80011cc:	e03c      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d102      	bne.n	80011da <ism330dhcx_xl_data_rate_set+0x22a>
                odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80011d4:	2302      	movs	r3, #2
 80011d6:	75fb      	strb	r3, [r7, #23]
                break;
 80011d8:	e036      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                odr_xl = val;
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	75fb      	strb	r3, [r7, #23]
                break;
 80011de:	e033      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>

            case ISM330DHCX_ODR_PRGS_52Hz:
                if (val == ISM330DHCX_XL_ODR_OFF) {
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <ism330dhcx_xl_data_rate_set+0x23c>
                odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80011e6:	2303      	movs	r3, #3
 80011e8:	75fb      	strb	r3, [r7, #23]

                else {
                odr_xl = val;
                }

                break;
 80011ea:	e02d      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d102      	bne.n	80011f8 <ism330dhcx_xl_data_rate_set+0x248>
                odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80011f2:	2303      	movs	r3, #3
 80011f4:	75fb      	strb	r3, [r7, #23]
                break;
 80011f6:	e027      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                else if (val == ISM330DHCX_XL_ODR_26Hz) {
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d102      	bne.n	8001204 <ism330dhcx_xl_data_rate_set+0x254>
                odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80011fe:	2303      	movs	r3, #3
 8001200:	75fb      	strb	r3, [r7, #23]
                break;
 8001202:	e021      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                odr_xl = val;
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	75fb      	strb	r3, [r7, #23]
                break;
 8001208:	e01e      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>

            case ISM330DHCX_ODR_PRGS_104Hz:
                if (val == ISM330DHCX_XL_ODR_OFF) {
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <ism330dhcx_xl_data_rate_set+0x266>
                odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001210:	2304      	movs	r3, #4
 8001212:	75fb      	strb	r3, [r7, #23]

                else {
                odr_xl = val;
                }

                break;
 8001214:	e018      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d102      	bne.n	8001222 <ism330dhcx_xl_data_rate_set+0x272>
                odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800121c:	2304      	movs	r3, #4
 800121e:	75fb      	strb	r3, [r7, #23]
                break;
 8001220:	e012      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d102      	bne.n	800122e <ism330dhcx_xl_data_rate_set+0x27e>
                odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001228:	2304      	movs	r3, #4
 800122a:	75fb      	strb	r3, [r7, #23]
                break;
 800122c:	e00c      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                else if (val == ISM330DHCX_XL_ODR_52Hz) {
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	2b03      	cmp	r3, #3
 8001232:	d102      	bne.n	800123a <ism330dhcx_xl_data_rate_set+0x28a>
                odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001234:	2304      	movs	r3, #4
 8001236:	75fb      	strb	r3, [r7, #23]
                break;
 8001238:	e006      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
                odr_xl = val;
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	75fb      	strb	r3, [r7, #23]
                break;
 800123e:	e003      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>

            default:
                odr_xl = val;
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	75fb      	strb	r3, [r7, #23]
                break;
 8001244:	e000      	b.n	8001248 <ism330dhcx_xl_data_rate_set+0x298>
            }
        }
 8001246:	bf00      	nop
        }
    }

    if (ret == 0) {
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d107      	bne.n	800125e <ism330dhcx_xl_data_rate_set+0x2ae>
        ret = ism330dhcx_read(h_ism, CTRL1_XL,
 800124e:	f107 0208 	add.w	r2, r7, #8
 8001252:	2301      	movs	r3, #1
 8001254:	2110      	movs	r1, #16
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fe04 	bl	8000e64 <ism330dhcx_read>
 800125c:	6138      	str	r0, [r7, #16]
                                (uint8_t *)&ctrl1_xl, 1);
    }

    if (ret == 0) {
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10f      	bne.n	8001284 <ism330dhcx_xl_data_rate_set+0x2d4>
        ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	b2da      	uxtb	r2, r3
 800126c:	7a3b      	ldrb	r3, [r7, #8]
 800126e:	f362 1307 	bfi	r3, r2, #4, #4
 8001272:	723b      	strb	r3, [r7, #8]
        ret = ism330dhcx_write(h_ism, CTRL1_XL,
 8001274:	f107 0208 	add.w	r2, r7, #8
 8001278:	2301      	movs	r3, #1
 800127a:	2110      	movs	r1, #16
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fe09 	bl	8000e94 <ism330dhcx_write>
 8001282:	6138      	str	r0, [r7, #16]
                                (uint8_t *)&ctrl1_xl, 1);
    }

    return ret;
 8001284:	693b      	ldr	r3, [r7, #16]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop

08001290 <ism330dhcx_gy_data_rate_set>:

int32_t ism330dhcx_gy_data_rate_set(ISM330DHCX_HandleTypeDef *h_ism, ism330dhcx_odr_g_t val)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(h_ism, &fsm_enable);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4619      	mov	r1, r3
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 faf0 	bl	800188c <ism330dhcx_fsm_enable_get>
 80012ac:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f040 80c4 	bne.w	800143e <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012bc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012c4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80012ca:	7b3b      	ldrb	r3, [r7, #12]
 80012cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80012d0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80012d6:	7b3b      	ldrb	r3, [r7, #12]
 80012d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80012dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80012de:	4313      	orrs	r3, r2
 80012e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80012e2:	7b3b      	ldrb	r3, [r7, #12]
 80012e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80012e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80012ee:	7b3b      	ldrb	r3, [r7, #12]
 80012f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80012fa:	7b3b      	ldrb	r3, [r7, #12]
 80012fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001300:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8001302:	4313      	orrs	r3, r2
 8001304:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800130c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800130e:	4313      	orrs	r3, r2
 8001310:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001318:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800131a:	4313      	orrs	r3, r2
 800131c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001324:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001326:	4313      	orrs	r3, r2
 8001328:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800132a:	7b7b      	ldrb	r3, [r7, #13]
 800132c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001330:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8001332:	4313      	orrs	r3, r2
 8001334:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800133c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800133e:	4313      	orrs	r3, r2
 8001340:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001342:	7b7b      	ldrb	r3, [r7, #13]
 8001344:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001348:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800134a:	4313      	orrs	r3, r2
 800134c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800134e:	7b7b      	ldrb	r3, [r7, #13]
 8001350:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001354:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001356:	4313      	orrs	r3, r2
 8001358:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800135a:	7b7b      	ldrb	r3, [r7, #13]
 800135c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001360:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001362:	4313      	orrs	r3, r2
 8001364:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8001366:	7b7b      	ldrb	r3, [r7, #13]
 8001368:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800136c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800136e:	4313      	orrs	r3, r2
 8001370:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001372:	2b01      	cmp	r3, #1
 8001374:	d163      	bne.n	800143e <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(h_ism, &fsm_odr);
 8001376:	f107 030b 	add.w	r3, r7, #11
 800137a:	4619      	mov	r1, r3
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fad7 	bl	8001930 <ism330dhcx_fsm_data_rate_get>
 8001382:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d159      	bne.n	800143e <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800138a:	7afb      	ldrb	r3, [r7, #11]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d853      	bhi.n	8001438 <ism330dhcx_gy_data_rate_set+0x1a8>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <ism330dhcx_gy_data_rate_set+0x108>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013bb 	.word	0x080013bb
 80013a0:	080013d9 	.word	0x080013d9
 80013a4:	08001403 	.word	0x08001403
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80013ae:	2301      	movs	r3, #1
 80013b0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80013b2:	e045      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	75fb      	strb	r3, [r7, #23]
            break;
 80013b8:	e042      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80013c0:	2302      	movs	r3, #2
 80013c2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80013c4:	e03c      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d102      	bne.n	80013d2 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80013cc:	2302      	movs	r3, #2
 80013ce:	75fb      	strb	r3, [r7, #23]
            break;
 80013d0:	e036      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	75fb      	strb	r3, [r7, #23]
            break;
 80013d6:	e033      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80013de:	2303      	movs	r3, #3
 80013e0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80013e2:	e02d      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d102      	bne.n	80013f0 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80013ea:	2303      	movs	r3, #3
 80013ec:	75fb      	strb	r3, [r7, #23]
            break;
 80013ee:	e027      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d102      	bne.n	80013fc <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80013f6:	2303      	movs	r3, #3
 80013f8:	75fb      	strb	r3, [r7, #23]
            break;
 80013fa:	e021      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	75fb      	strb	r3, [r7, #23]
            break;
 8001400:	e01e      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001408:	2304      	movs	r3, #4
 800140a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800140c:	e018      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d102      	bne.n	800141a <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001414:	2304      	movs	r3, #4
 8001416:	75fb      	strb	r3, [r7, #23]
            break;
 8001418:	e012      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d102      	bne.n	8001426 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001420:	2304      	movs	r3, #4
 8001422:	75fb      	strb	r3, [r7, #23]
            break;
 8001424:	e00c      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	2b03      	cmp	r3, #3
 800142a:	d102      	bne.n	8001432 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800142c:	2304      	movs	r3, #4
 800142e:	75fb      	strb	r3, [r7, #23]
            break;
 8001430:	e006      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	75fb      	strb	r3, [r7, #23]
            break;
 8001436:	e003      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	75fb      	strb	r3, [r7, #23]
            break;
 800143c:	e000      	b.n	8001440 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 800143e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d16d      	bne.n	8001526 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(h_ism, &mlc_enable);
 800144a:	f107 030a 	add.w	r3, r7, #10
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 fab5 	bl	80019c0 <ism330dhcx_mlc_get>
 8001456:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8001458:	7abb      	ldrb	r3, [r7, #10]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d163      	bne.n	8001526 <ism330dhcx_gy_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(h_ism, &mlc_odr);
 800145e:	f107 0309 	add.w	r3, r7, #9
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 fad5 	bl	8001a14 <ism330dhcx_mlc_data_rate_get>
 800146a:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d159      	bne.n	8001526 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 8001472:	7a7b      	ldrb	r3, [r7, #9]
 8001474:	2b03      	cmp	r3, #3
 8001476:	d853      	bhi.n	8001520 <ism330dhcx_gy_data_rate_set+0x290>
 8001478:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <ism330dhcx_gy_data_rate_set+0x1f0>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	08001491 	.word	0x08001491
 8001484:	080014a3 	.word	0x080014a3
 8001488:	080014c1 	.word	0x080014c1
 800148c:	080014eb 	.word	0x080014eb
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8001496:	2301      	movs	r3, #1
 8001498:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800149a:	e045      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	75fb      	strb	r3, [r7, #23]
            break;
 80014a0:	e042      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80014a8:	2302      	movs	r3, #2
 80014aa:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80014ac:	e03c      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d102      	bne.n	80014ba <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80014b4:	2302      	movs	r3, #2
 80014b6:	75fb      	strb	r3, [r7, #23]
            break;
 80014b8:	e036      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	75fb      	strb	r3, [r7, #23]
            break;
 80014be:	e033      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014c6:	2303      	movs	r3, #3
 80014c8:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80014ca:	e02d      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014d2:	2303      	movs	r3, #3
 80014d4:	75fb      	strb	r3, [r7, #23]
            break;
 80014d6:	e027      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d102      	bne.n	80014e4 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80014de:	2303      	movs	r3, #3
 80014e0:	75fb      	strb	r3, [r7, #23]
            break;
 80014e2:	e021      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	75fb      	strb	r3, [r7, #23]
            break;
 80014e8:	e01e      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80014ea:	78fb      	ldrb	r3, [r7, #3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80014f0:	2304      	movs	r3, #4
 80014f2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80014f4:	e018      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d102      	bne.n	8001502 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80014fc:	2304      	movs	r3, #4
 80014fe:	75fb      	strb	r3, [r7, #23]
            break;
 8001500:	e012      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d102      	bne.n	800150e <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001508:	2304      	movs	r3, #4
 800150a:	75fb      	strb	r3, [r7, #23]
            break;
 800150c:	e00c      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d102      	bne.n	800151a <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001514:	2304      	movs	r3, #4
 8001516:	75fb      	strb	r3, [r7, #23]
            break;
 8001518:	e006      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	75fb      	strb	r3, [r7, #23]
            break;
 800151e:	e003      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	75fb      	strb	r3, [r7, #23]
            break;
 8001524:	e000      	b.n	8001528 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8001526:	bf00      	nop
    }
  }

  if (ret == 0) {
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d107      	bne.n	800153e <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read(h_ism, CTRL2_G,
 800152e:	f107 0208 	add.w	r2, r7, #8
 8001532:	2301      	movs	r3, #1
 8001534:	2111      	movs	r1, #17
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fc94 	bl	8000e64 <ism330dhcx_read>
 800153c:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10f      	bne.n	8001564 <ism330dhcx_gy_data_rate_set+0x2d4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	b2da      	uxtb	r2, r3
 800154c:	7a3b      	ldrb	r3, [r7, #8]
 800154e:	f362 1307 	bfi	r3, r2, #4, #4
 8001552:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write(h_ism, CTRL2_G,
 8001554:	f107 0208 	add.w	r2, r7, #8
 8001558:	2301      	movs	r3, #1
 800155a:	2111      	movs	r1, #17
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fc99 	bl	8000e94 <ism330dhcx_write>
 8001562:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8001564:	693b      	ldr	r3, [r7, #16]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop

08001570 <ism330dhcx_xl_full_scale_set>:

/* Set Full Scale */
int32_t ism330dhcx_xl_full_scale_set(ISM330DHCX_HandleTypeDef *h_ism, ism330dhcx_fs_xl_t val)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_ois_t ctrl3_ois;
  int32_t ret;
  ret = ism330dhcx_read(h_ism, CTRL3_OIS,
 800157c:	f107 0208 	add.w	r2, r7, #8
 8001580:	2301      	movs	r3, #1
 8001582:	2172      	movs	r1, #114	; 0x72
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fc6d 	bl	8000e64 <ism330dhcx_read>
 800158a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_ois, 1);

  if (ret == 0) {
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10f      	bne.n	80015b2 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl3_ois.fs_xl_ois = (uint8_t)val;
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	b2da      	uxtb	r2, r3
 800159a:	7a3b      	ldrb	r3, [r7, #8]
 800159c:	f362 1387 	bfi	r3, r2, #6, #2
 80015a0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write(h_ism, CTRL3_OIS,
 80015a2:	f107 0208 	add.w	r2, r7, #8
 80015a6:	2301      	movs	r3, #1
 80015a8:	2172      	movs	r1, #114	; 0x72
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fc72 	bl	8000e94 <ism330dhcx_write>
 80015b0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_ois, 1);
  }

  return ret;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <ism330dhcx_gy_full_scale_set>:

int32_t ism330dhcx_gy_full_scale_set(ISM330DHCX_HandleTypeDef *h_ism, ism330dhcx_fs_g_t val)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  ret = ism330dhcx_read(h_ism, CTRL2_G,
 80015cc:	f107 0208 	add.w	r2, r7, #8
 80015d0:	2301      	movs	r3, #1
 80015d2:	2111      	movs	r1, #17
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fc45 	bl	8000e64 <ism330dhcx_read>
 80015da:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <ism330dhcx_gy_full_scale_set+0x46>
    ctrl2_g.fs_g = (uint8_t)val;
 80015e2:	78fb      	ldrb	r3, [r7, #3]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	7a3b      	ldrb	r3, [r7, #8]
 80015ec:	f362 0383 	bfi	r3, r2, #2, #2
 80015f0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write(h_ism, CTRL2_G,
 80015f2:	f107 0208 	add.w	r2, r7, #8
 80015f6:	2301      	movs	r3, #1
 80015f8:	2111      	movs	r1, #17
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fc4a 	bl	8000e94 <ism330dhcx_write>
 8001600:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <ism330dhcx_xl_hp_path_on_out_set>:

/* Configure Filtering chain (no Aux interface)
    Accelerometer - LPF1 + LPF2 path            */
int32_t ism330dhcx_xl_hp_path_on_out_set(ISM330DHCX_HandleTypeDef *h_ism, ism330dhcx_hp_slope_xl_en_t val)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dhcx_read(h_ism, CTRL8_XL,
 8001618:	f107 0208 	add.w	r2, r7, #8
 800161c:	2301      	movs	r3, #1
 800161e:	2117      	movs	r1, #23
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fc1f 	bl	8000e64 <ism330dhcx_read>
 8001626:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0) {
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d121      	bne.n	8001672 <ism330dhcx_xl_hp_path_on_out_set+0x66>
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	7a3b      	ldrb	r3, [r7, #8]
 800163a:	f362 0382 	bfi	r3, r2, #2, #1
 800163e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	b2da      	uxtb	r2, r3
 800164a:	7a3b      	ldrb	r3, [r7, #8]
 800164c:	f362 1304 	bfi	r3, r2, #4, #1
 8001650:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	b2da      	uxtb	r2, r3
 800165a:	7a3b      	ldrb	r3, [r7, #8]
 800165c:	f362 1347 	bfi	r3, r2, #5, #3
 8001660:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write(h_ism, CTRL8_XL,
 8001662:	f107 0208 	add.w	r2, r7, #8
 8001666:	2301      	movs	r3, #1
 8001668:	2117      	movs	r1, #23
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fc12 	bl	8000e94 <ism330dhcx_write>
 8001670:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <ism330dhcx_xl_filter_lp2_set>:

int32_t ism330dhcx_xl_filter_lp2_set(ISM330DHCX_HandleTypeDef *h_ism, uint8_t val)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	70fb      	strb	r3, [r7, #3]
    ism330dhcx_ctrl1_xl_t ctrl1_xl;
    int32_t ret;
    ret = ism330dhcx_read(h_ism, CTRL1_XL,
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2301      	movs	r3, #1
 800168e:	2110      	movs	r1, #16
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fbe7 	bl	8000e64 <ism330dhcx_read>
 8001696:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

    if (ret == 0) {
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <ism330dhcx_xl_filter_lp2_set+0x42>
        ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 800169e:	78fb      	ldrb	r3, [r7, #3]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	7a3b      	ldrb	r3, [r7, #8]
 80016a8:	f362 0341 	bfi	r3, r2, #1, #1
 80016ac:	723b      	strb	r3, [r7, #8]
        ret = ism330dhcx_write(h_ism, CTRL1_XL,
 80016ae:	f107 0208 	add.w	r2, r7, #8
 80016b2:	2301      	movs	r3, #1
 80016b4:	2110      	movs	r1, #16
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fbec 	bl	8000e94 <ism330dhcx_write>
 80016bc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
    }
  return ret;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <ism330dhcx_xl_flag_data_ready_get>:

/********** Reading samples on Polling mod (no int) **********/

/* Read Acceleration Data Ready Flag */
int32_t ism330dhcx_xl_flag_data_ready_get(ISM330DHCX_HandleTypeDef *h_ism, uint8_t *val)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    ism330dhcx_spi_aux_t status_spiaux;
    int32_t ret;
    ret = ism330dhcx_read(h_ism, STATUS_SPIAUX,
 80016d2:	f107 0208 	add.w	r2, r7, #8
 80016d6:	2301      	movs	r3, #1
 80016d8:	211e      	movs	r1, #30
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fbc2 	bl	8000e64 <ism330dhcx_read>
 80016e0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&status_spiaux, 1);
    *val = status_spiaux.xlda;
 80016e2:	7a3b      	ldrb	r3, [r7, #8]
 80016e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	701a      	strb	r2, [r3, #0]
    return ret;
 80016f0:	68fb      	ldr	r3, [r7, #12]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <ism330dhcx_acceleration_raw_get>:

/* Read Acceleration Field Data */
int32_t ism330dhcx_acceleration_raw_get(ISM330DHCX_HandleTypeDef *h_ism, int16_t *val)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
    uint8_t buff[6];

    ret = ism330dhcx_read(h_ism, OUTX_L_A, buff, 6);
 8001708:	f107 020c 	add.w	r2, r7, #12
 800170c:	2306      	movs	r3, #6
 800170e:	2128      	movs	r1, #40	; 0x28
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fba7 	bl	8000e64 <ism330dhcx_read>
 8001716:	6178      	str	r0, [r7, #20]

    if(!ret) {
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d122      	bne.n	8001764 <ism330dhcx_acceleration_raw_get+0x6a>
    	val[0] = (int16_t)buff[1]*256 + (int16_t)buff[0];	//< [OUTX_A] = OUTX_H_A<<8 | OUTX_L_A
 800171e:	7b7b      	ldrb	r3, [r7, #13]
 8001720:	b29b      	uxth	r3, r3
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b29a      	uxth	r2, r3
 8001726:	7b3b      	ldrb	r3, [r7, #12]
 8001728:	b29b      	uxth	r3, r3
 800172a:	4413      	add	r3, r2
 800172c:	b29b      	uxth	r3, r3
 800172e:	b21a      	sxth	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	801a      	strh	r2, [r3, #0]
    	val[1] = (int16_t)buff[3]*256 + (int16_t)buff[2];	//< [OUTY_A]
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	b29b      	uxth	r3, r3
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b29a      	uxth	r2, r3
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4413      	add	r3, r2
 8001742:	b29a      	uxth	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	3302      	adds	r3, #2
 8001748:	b212      	sxth	r2, r2
 800174a:	801a      	strh	r2, [r3, #0]
    	val[2] = (int16_t)buff[5]*256 + (int16_t)buff[4];	//<	[OUTZ_A]
 800174c:	7c7b      	ldrb	r3, [r7, #17]
 800174e:	b29b      	uxth	r3, r3
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b29a      	uxth	r2, r3
 8001754:	7c3b      	ldrb	r3, [r7, #16]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	b29a      	uxth	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	3304      	adds	r3, #4
 8001760:	b212      	sxth	r2, r2
 8001762:	801a      	strh	r2, [r3, #0]
    }

    return ret;
 8001764:	697b      	ldr	r3, [r7, #20]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <ism330dhcx_gy_flag_data_ready_get>:

/* Read Acceleration Data Ready Flag */
int32_t ism330dhcx_gy_flag_data_ready_get(ISM330DHCX_HandleTypeDef *h_ism, uint8_t *val)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b084      	sub	sp, #16
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
	ism330dhcx_spi_aux_t status_spiaux;
	int32_t ret;
	ret = ism330dhcx_read(h_ism, STATUS_SPIAUX,
 8001778:	f107 0208 	add.w	r2, r7, #8
 800177c:	2301      	movs	r3, #1
 800177e:	211e      	movs	r1, #30
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fb6f 	bl	8000e64 <ism330dhcx_read>
 8001786:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&status_spiaux, 1);
	*val = status_spiaux.gda;
 8001788:	7a3b      	ldrb	r3, [r7, #8]
 800178a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	701a      	strb	r2, [r3, #0]
	return ret;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <ism330dhcx_angular_rate_raw_get>:
/* Read Angular Rate Field Data */
int32_t ism330dhcx_angular_rate_raw_get(ISM330DHCX_HandleTypeDef *h_ism, int16_t *val)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    int32_t ret = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
    uint8_t buff[6];

    ret = ism330dhcx_read(h_ism, OUTX_L_G, buff, 6);
 80017ae:	f107 020c 	add.w	r2, r7, #12
 80017b2:	2306      	movs	r3, #6
 80017b4:	2122      	movs	r1, #34	; 0x22
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fb54 	bl	8000e64 <ism330dhcx_read>
 80017bc:	6178      	str	r0, [r7, #20]

    if(!ret) {
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d122      	bne.n	800180a <ism330dhcx_angular_rate_raw_get+0x6a>
    	val[0] = (int16_t)buff[1]*256 + (int16_t)buff[0];	//< OUTX_G
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	7b3b      	ldrb	r3, [r7, #12]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4413      	add	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	801a      	strh	r2, [r3, #0]
    	val[1] = (int16_t)buff[3]*256 + (int16_t)buff[2];	//< OUTY_G
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	7bbb      	ldrb	r3, [r7, #14]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3302      	adds	r3, #2
 80017ee:	b212      	sxth	r2, r2
 80017f0:	801a      	strh	r2, [r3, #0]
    	val[2] = (int16_t)buff[5]*256 + (int16_t)buff[4];	//< OUTZ_G
 80017f2:	7c7b      	ldrb	r3, [r7, #17]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	7c3b      	ldrb	r3, [r7, #16]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4413      	add	r3, r2
 8001800:	b29a      	uxth	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	3304      	adds	r3, #4
 8001806:	b212      	sxth	r2, r2
 8001808:	801a      	strh	r2, [r3, #0]
    }
    return ret;
 800180a:	697b      	ldr	r3, [r7, #20]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <ism330dhcx_temp_flag_data_ready_get>:

/* Read Temperature Data Ready Flag */
int32_t ism330dhcx_temp_flag_data_ready_get(ISM330DHCX_HandleTypeDef *h_ism, uint8_t *val)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
    ism330dhcx_status_reg_t status_reg;
    int32_t ret;
    ret = ism330dhcx_read(h_ism, STATUS_SPIAUX,
 800181e:	f107 0208 	add.w	r2, r7, #8
 8001822:	2301      	movs	r3, #1
 8001824:	211e      	movs	r1, #30
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff fb1c 	bl	8000e64 <ism330dhcx_read>
 800182c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&status_reg, 1);
    *val = status_reg.tda;
 800182e:	7a3b      	ldrb	r3, [r7, #8]
 8001830:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	701a      	strb	r2, [r3, #0]
    return ret;
 800183c:	68fb      	ldr	r3, [r7, #12]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <ism330dhcx_temperature_raw_get>:

/* Read Temperature  Data */
int32_t ism330dhcx_temperature_raw_get(ISM330DHCX_HandleTypeDef *h_ism, int16_t *val)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
    uint8_t buff[2];
    int32_t ret;
    ret = ism330dhcx_read(h_ism, OUT_TEMP_L, buff, 2);
 8001850:	f107 0208 	add.w	r2, r7, #8
 8001854:	2302      	movs	r3, #2
 8001856:	2120      	movs	r1, #32
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fb03 	bl	8000e64 <ism330dhcx_read>
 800185e:	60f8      	str	r0, [r7, #12]
    *val = (int16_t)buff[1];
 8001860:	7a7b      	ldrb	r3, [r7, #9]
 8001862:	b21a      	sxth	r2, r3
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) +  (int16_t)buff[0];
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186e:	b29b      	uxth	r3, r3
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	b29a      	uxth	r2, r3
 8001874:	7a3b      	ldrb	r3, [r7, #8]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	b21a      	sxth	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	801a      	strh	r2, [r3, #0]
    return ret;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(ISM330DHCX_HandleTypeDef *h_ism,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(h_ism, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8001896:	2102      	movs	r1, #2
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f823 	bl	80018e4 <ism330dhcx_mem_bank_set>
 800189e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d106      	bne.n	80018b4 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read(h_ism, FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80018a6:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read(h_ism, FSM_ENABLE_A,
 80018a8:	2301      	movs	r3, #1
 80018aa:	2146      	movs	r1, #70	; 0x46
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff fad9 	bl	8000e64 <ism330dhcx_read>
 80018b2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d107      	bne.n	80018ca <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read(h_ism, FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read(h_ism, FSM_ENABLE_B,
 80018be:	2301      	movs	r3, #1
 80018c0:	2147      	movs	r1, #71	; 0x47
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff face 	bl	8000e64 <ism330dhcx_read>
 80018c8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d104      	bne.n	80018da <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(h_ism, ISM330DHCX_USER_BANK);
 80018d0:	2100      	movs	r1, #0
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f806 	bl	80018e4 <ism330dhcx_mem_bank_set>
 80018d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(ISM330DHCX_HandleTypeDef *h_ism,
                                ism330dhcx_reg_access_t val)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read(h_ism, FUNC_CFG_ACCESS,
 80018f0:	f107 0208 	add.w	r2, r7, #8
 80018f4:	2301      	movs	r3, #1
 80018f6:	2101      	movs	r1, #1
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff fab3 	bl	8000e64 <ism330dhcx_read>
 80018fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	7a3b      	ldrb	r3, [r7, #8]
 8001910:	f362 1387 	bfi	r3, r2, #6, #2
 8001914:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write(h_ism, FUNC_CFG_ACCESS,
 8001916:	f107 0208 	add.w	r2, r7, #8
 800191a:	2301      	movs	r3, #1
 800191c:	2101      	movs	r1, #1
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fab8 	bl	8000e94 <ism330dhcx_write>
 8001924:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(ISM330DHCX_HandleTypeDef *h_ism,
                                     ism330dhcx_fsm_odr_t *val)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(h_ism, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800193a:	2102      	movs	r1, #2
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffd1 	bl	80018e4 <ism330dhcx_mem_bank_set>
 8001942:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d107      	bne.n	800195a <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read(h_ism, EMB_FUNC_ODR_CFG_B,
 800194a:	f107 0208 	add.w	r2, r7, #8
 800194e:	2301      	movs	r3, #1
 8001950:	215f      	movs	r1, #95	; 0x5f
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fa86 	bl	8000e64 <ism330dhcx_read>
 8001958:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(h_ism, ISM330DHCX_USER_BANK);
 8001960:	2100      	movs	r1, #0
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffbe 	bl	80018e4 <ism330dhcx_mem_bank_set>
 8001968:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 800196a:	7a3b      	ldrb	r3, [r7, #8]
 800196c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b03      	cmp	r3, #3
 8001974:	d81a      	bhi.n	80019ac <ism330dhcx_fsm_data_rate_get+0x7c>
 8001976:	a201      	add	r2, pc, #4	; (adr r2, 800197c <ism330dhcx_fsm_data_rate_get+0x4c>)
 8001978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197c:	0800198d 	.word	0x0800198d
 8001980:	08001995 	.word	0x08001995
 8001984:	0800199d 	.word	0x0800199d
 8001988:	080019a5 	.word	0x080019a5
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
      break;
 8001992:	e00f      	b.n	80019b4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
      break;
 800199a:	e00b      	b.n	80019b4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]
      break;
 80019a2:	e007      	b.n	80019b4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2203      	movs	r2, #3
 80019a8:	701a      	strb	r2, [r3, #0]
      break;
 80019aa:	e003      	b.n	80019b4 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
      break;
 80019b2:	bf00      	nop
  }

  return ret;
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop

080019c0 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(ISM330DHCX_HandleTypeDef *h_ism, uint8_t *val)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(h_ism, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80019ca:	2102      	movs	r1, #2
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff89 	bl	80018e4 <ism330dhcx_mem_bank_set>
 80019d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d107      	bne.n	80019ea <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read(h_ism, EMB_FUNC_EN_B,
 80019da:	f107 0208 	add.w	r2, r7, #8
 80019de:	2301      	movs	r3, #1
 80019e0:	2105      	movs	r1, #5
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fa3e 	bl	8000e64 <ism330dhcx_read>
 80019e8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10b      	bne.n	8001a08 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(h_ism, ISM330DHCX_USER_BANK);
 80019f0:	2100      	movs	r1, #0
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff76 	bl	80018e4 <ism330dhcx_mem_bank_set>
 80019f8:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80019fa:	7a3b      	ldrb	r3, [r7, #8]
 80019fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(ISM330DHCX_HandleTypeDef *h_ism,
                                     ism330dhcx_mlc_odr_t *val)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(h_ism, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8001a1e:	2102      	movs	r1, #2
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff5f 	bl	80018e4 <ism330dhcx_mem_bank_set>
 8001a26:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d107      	bne.n	8001a3e <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read(h_ism, EMB_FUNC_ODR_CFG_C,
 8001a2e:	f107 0208 	add.w	r2, r7, #8
 8001a32:	2301      	movs	r3, #1
 8001a34:	2160      	movs	r1, #96	; 0x60
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fa14 	bl	8000e64 <ism330dhcx_read>
 8001a3c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d12a      	bne.n	8001a9a <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8001a44:	7a3b      	ldrb	r3, [r7, #8]
 8001a46:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d81b      	bhi.n	8001a88 <ism330dhcx_mlc_data_rate_get+0x74>
 8001a50:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <ism330dhcx_mlc_data_rate_get+0x44>)
 8001a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a56:	bf00      	nop
 8001a58:	08001a69 	.word	0x08001a69
 8001a5c:	08001a71 	.word	0x08001a71
 8001a60:	08001a79 	.word	0x08001a79
 8001a64:	08001a81 	.word	0x08001a81
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
        break;
 8001a6e:	e00f      	b.n	8001a90 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
        break;
 8001a76:	e00b      	b.n	8001a90 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	701a      	strb	r2, [r3, #0]
        break;
 8001a7e:	e007      	b.n	8001a90 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2203      	movs	r2, #3
 8001a84:	701a      	strb	r2, [r3, #0]
        break;
 8001a86:	e003      	b.n	8001a90 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
        break;
 8001a8e:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(h_ism, ISM330DHCX_USER_BANK);
 8001a90:	2100      	movs	r1, #0
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ff26 	bl	80018e4 <ism330dhcx_mem_bank_set>
 8001a98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <ism330dhcx_from_fs2g_to_mg>:

/**********          Conversion Function            **********/
/* Extern functions */
float_t ism330dhcx_from_fs2g_to_mg(int16_t lsb)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
    return ((float_t)lsb * 0.061f / 1000.0f);
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aba:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001adc <ism330dhcx_from_fs2g_to_mg+0x38>
 8001abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ae0 <ism330dhcx_from_fs2g_to_mg+0x3c>
 8001ac6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001aca:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ace:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	3d79db23 	.word	0x3d79db23
 8001ae0:	447a0000 	.word	0x447a0000

08001ae4 <ism330dhcx_from_fs2000dps_to_mdps>:
float_t ism330dhcx_from_fs1000dps_to_mdps(int16_t lsb)
{
  return ((float_t)lsb * 35.0f / 1000.0f);
}
float_t ism330dhcx_from_fs2000dps_to_mdps(int16_t lsb)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f / 1000.0f);
 8001aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001b1c <ism330dhcx_from_fs2000dps_to_mdps+0x38>
 8001afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b02:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001b20 <ism330dhcx_from_fs2000dps_to_mdps+0x3c>
 8001b06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b0a:	eef0 7a66 	vmov.f32	s15, s13
}
 8001b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	428c0000 	.word	0x428c0000
 8001b20:	447a0000 	.word	0x447a0000

08001b24 <ism330dhcx_from_lsb_to_celsius>:
float_t ism330dhcx_from_fs4000dps_to_mdps(int16_t lsb)
{
  return ((float_t)lsb * 140.0f / 1000.0f);
}
float_t ism330dhcx_from_lsb_to_celsius(int16_t lsb)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001b58 <ism330dhcx_from_lsb_to_celsius+0x34>
 8001b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b42:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001b46:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	43800000 	.word	0x43800000

08001b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b66:	2003      	movs	r0, #3
 8001b68:	f000 f93c 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f000 f80d 	bl	8001b8c <HAL_InitTick>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	e001      	b.n	8001b82 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7e:	f7fe fee7 	bl	8000950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b82:	79fb      	ldrb	r3, [r7, #7]

}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <HAL_InitTick+0x68>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d022      	beq.n	8001be6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <HAL_InitTick+0x6c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_InitTick+0x68>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f93a 	bl	8001e2e <HAL_SYSTICK_Config>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10f      	bne.n	8001be0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b0f      	cmp	r3, #15
 8001bc4:	d809      	bhi.n	8001bda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	f04f 30ff 	mov.w	r0, #4294967295
 8001bce:	f000 f914 	bl	8001dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_InitTick+0x70>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e007      	b.n	8001bea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e004      	b.n	8001bea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e001      	b.n	8001bea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_IncTick+0x1c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_IncTick+0x20>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <HAL_IncTick+0x1c>)
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	20000120 	.word	0x20000120
 8001c20:	20000008 	.word	0x20000008

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000120 	.word	0x20000120

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d004      	beq.n	8001c60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_Delay+0x40>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c60:	bf00      	nop
 8001c62:	f7ff ffdf 	bl	8001c24 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d8f7      	bhi.n	8001c62 <HAL_Delay+0x26>
  {
  }
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff8e 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff47 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e08:	f7ff ff5e 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	6978      	ldr	r0, [r7, #20]
 8001e14:	f7ff ff90 	bl	8001d38 <NVIC_EncodePriority>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff5f 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffb2 	bl	8001da0 <SysTick_Config>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e56:	e15a      	b.n	800210e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa01 f303 	lsl.w	r3, r1, r3
 8001e64:	4013      	ands	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 814c 	beq.w	8002108 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d00b      	beq.n	8001e90 <HAL_GPIO_Init+0x48>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d007      	beq.n	8001e90 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e84:	2b11      	cmp	r3, #17
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b12      	cmp	r3, #18
 8001e8e:	d130      	bne.n	8001ef2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f003 0201 	and.w	r2, r3, #1
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0xea>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b12      	cmp	r3, #18
 8001f30:	d123      	bne.n	8001f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	08da      	lsrs	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3208      	adds	r2, #8
 8001f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	220f      	movs	r2, #15
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	08da      	lsrs	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3208      	adds	r2, #8
 8001f74:	6939      	ldr	r1, [r7, #16]
 8001f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0203 	and.w	r2, r3, #3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80a6 	beq.w	8002108 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbc:	4b5b      	ldr	r3, [pc, #364]	; (800212c <HAL_GPIO_Init+0x2e4>)
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc0:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_GPIO_Init+0x2e4>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6613      	str	r3, [r2, #96]	; 0x60
 8001fc8:	4b58      	ldr	r3, [pc, #352]	; (800212c <HAL_GPIO_Init+0x2e4>)
 8001fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd4:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ffe:	d01f      	beq.n	8002040 <HAL_GPIO_Init+0x1f8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_GPIO_Init+0x2ec>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d019      	beq.n	800203c <HAL_GPIO_Init+0x1f4>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <HAL_GPIO_Init+0x2f0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d013      	beq.n	8002038 <HAL_GPIO_Init+0x1f0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a4a      	ldr	r2, [pc, #296]	; (800213c <HAL_GPIO_Init+0x2f4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00d      	beq.n	8002034 <HAL_GPIO_Init+0x1ec>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a49      	ldr	r2, [pc, #292]	; (8002140 <HAL_GPIO_Init+0x2f8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d007      	beq.n	8002030 <HAL_GPIO_Init+0x1e8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a48      	ldr	r2, [pc, #288]	; (8002144 <HAL_GPIO_Init+0x2fc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_GPIO_Init+0x1e4>
 8002028:	2305      	movs	r3, #5
 800202a:	e00a      	b.n	8002042 <HAL_GPIO_Init+0x1fa>
 800202c:	2306      	movs	r3, #6
 800202e:	e008      	b.n	8002042 <HAL_GPIO_Init+0x1fa>
 8002030:	2304      	movs	r3, #4
 8002032:	e006      	b.n	8002042 <HAL_GPIO_Init+0x1fa>
 8002034:	2303      	movs	r3, #3
 8002036:	e004      	b.n	8002042 <HAL_GPIO_Init+0x1fa>
 8002038:	2302      	movs	r3, #2
 800203a:	e002      	b.n	8002042 <HAL_GPIO_Init+0x1fa>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_GPIO_Init+0x1fa>
 8002040:	2300      	movs	r3, #0
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	f002 0203 	and.w	r2, r2, #3
 8002048:	0092      	lsls	r2, r2, #2
 800204a:	4093      	lsls	r3, r2
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002052:	4937      	ldr	r1, [pc, #220]	; (8002130 <HAL_GPIO_Init+0x2e8>)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_GPIO_Init+0x300>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002084:	4a30      	ldr	r2, [pc, #192]	; (8002148 <HAL_GPIO_Init+0x300>)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_GPIO_Init+0x300>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020ae:	4a26      	ldr	r2, [pc, #152]	; (8002148 <HAL_GPIO_Init+0x300>)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_GPIO_Init+0x300>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4013      	ands	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020d8:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <HAL_GPIO_Init+0x300>)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_GPIO_Init+0x300>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002102:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_GPIO_Init+0x300>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	3301      	adds	r3, #1
 800210c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	f47f ae9d 	bne.w	8001e58 <HAL_GPIO_Init+0x10>
  }
}
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40010000 	.word	0x40010000
 8002134:	48000400 	.word	0x48000400
 8002138:	48000800 	.word	0x48000800
 800213c:	48000c00 	.word	0x48000c00
 8002140:	48001000 	.word	0x48001000
 8002144:	48001400 	.word	0x48001400
 8002148:	40010400 	.word	0x40010400

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002168:	e002      	b.n	8002170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e081      	b.n	8002292 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fbf8 	bl	8000998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2224      	movs	r2, #36	; 0x24
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d107      	bne.n	80021f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e006      	b.n	8002204 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002202:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d104      	bne.n	8002216 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002228:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002238:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	ea42 0103 	orr.w	r1, r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	021a      	lsls	r2, r3, #8
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69d9      	ldr	r1, [r3, #28]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	817b      	strh	r3, [r7, #10]
 80022ae:	460b      	mov	r3, r1
 80022b0:	813b      	strh	r3, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b20      	cmp	r3, #32
 80022c0:	f040 80f9 	bne.w	80024b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_I2C_Mem_Write+0x34>
 80022ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0ed      	b.n	80024b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_I2C_Mem_Write+0x4e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e0e6      	b.n	80024b8 <HAL_I2C_Mem_Write+0x21c>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022f2:	f7ff fc97 	bl	8001c24 <HAL_GetTick>
 80022f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2319      	movs	r3, #25
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fac3 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0d1      	b.n	80024b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2221      	movs	r2, #33	; 0x21
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2240      	movs	r2, #64	; 0x40
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a3a      	ldr	r2, [r7, #32]
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800233c:	88f8      	ldrh	r0, [r7, #6]
 800233e:	893a      	ldrh	r2, [r7, #8]
 8002340:	8979      	ldrh	r1, [r7, #10]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	4603      	mov	r3, r0
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f9d3 	bl	80026f8 <I2C_RequestMemoryWrite>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0a9      	b.n	80024b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	2bff      	cmp	r3, #255	; 0xff
 800236c:	d90e      	bls.n	800238c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	22ff      	movs	r2, #255	; 0xff
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002378:	b2da      	uxtb	r2, r3
 800237a:	8979      	ldrh	r1, [r7, #10]
 800237c:	2300      	movs	r3, #0
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fba5 	bl	8002ad4 <I2C_TransferConfig>
 800238a:	e00f      	b.n	80023ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	b2da      	uxtb	r2, r3
 800239c:	8979      	ldrh	r1, [r7, #10]
 800239e:	2300      	movs	r3, #0
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fb94 	bl	8002ad4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 faad 	bl	8002910 <I2C_WaitOnTXISFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e07b      	b.n	80024b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d034      	beq.n	8002464 <HAL_I2C_Mem_Write+0x1c8>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d130      	bne.n	8002464 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	2200      	movs	r2, #0
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fa3f 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e04d      	b.n	80024b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	2bff      	cmp	r3, #255	; 0xff
 8002424:	d90e      	bls.n	8002444 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	b2da      	uxtb	r2, r3
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	2300      	movs	r3, #0
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fb49 	bl	8002ad4 <I2C_TransferConfig>
 8002442:	e00f      	b.n	8002464 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	b2da      	uxtb	r2, r3
 8002454:	8979      	ldrh	r1, [r7, #10]
 8002456:	2300      	movs	r3, #0
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fb38 	bl	8002ad4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d19e      	bne.n	80023ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fa8c 	bl	8002990 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e01a      	b.n	80024b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2220      	movs	r2, #32
 8002488:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_I2C_Mem_Write+0x224>)
 8002496:	400b      	ands	r3, r1
 8002498:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
  }
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	fe00e800 	.word	0xfe00e800

080024c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	817b      	strh	r3, [r7, #10]
 80024d6:	460b      	mov	r3, r1
 80024d8:	813b      	strh	r3, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	f040 80fd 	bne.w	80026e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_I2C_Mem_Read+0x34>
 80024f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0f1      	b.n	80026e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_I2C_Mem_Read+0x4e>
 800250e:	2302      	movs	r3, #2
 8002510:	e0ea      	b.n	80026e8 <HAL_I2C_Mem_Read+0x224>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800251a:	f7ff fb83 	bl	8001c24 <HAL_GetTick>
 800251e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2319      	movs	r3, #25
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f9af 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0d5      	b.n	80026e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2222      	movs	r2, #34	; 0x22
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2240      	movs	r2, #64	; 0x40
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a3a      	ldr	r2, [r7, #32]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800255c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002564:	88f8      	ldrh	r0, [r7, #6]
 8002566:	893a      	ldrh	r2, [r7, #8]
 8002568:	8979      	ldrh	r1, [r7, #10]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	4603      	mov	r3, r0
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f913 	bl	80027a0 <I2C_RequestMemoryRead>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0ad      	b.n	80026e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2bff      	cmp	r3, #255	; 0xff
 8002594:	d90e      	bls.n	80025b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	22ff      	movs	r2, #255	; 0xff
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	8979      	ldrh	r1, [r7, #10]
 80025a4:	4b52      	ldr	r3, [pc, #328]	; (80026f0 <HAL_I2C_Mem_Read+0x22c>)
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fa91 	bl	8002ad4 <I2C_TransferConfig>
 80025b2:	e00f      	b.n	80025d4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	8979      	ldrh	r1, [r7, #10]
 80025c6:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <HAL_I2C_Mem_Read+0x22c>)
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fa80 	bl	8002ad4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	2200      	movs	r2, #0
 80025dc:	2104      	movs	r1, #4
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f956 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e07c      	b.n	80026e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d034      	beq.n	8002694 <HAL_I2C_Mem_Read+0x1d0>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	2b00      	cmp	r3, #0
 8002630:	d130      	bne.n	8002694 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	2200      	movs	r2, #0
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f927 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e04d      	b.n	80026e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2bff      	cmp	r3, #255	; 0xff
 8002654:	d90e      	bls.n	8002674 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fa31 	bl	8002ad4 <I2C_TransferConfig>
 8002672:	e00f      	b.n	8002694 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	b2da      	uxtb	r2, r3
 8002684:	8979      	ldrh	r1, [r7, #10]
 8002686:	2300      	movs	r3, #0
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa20 	bl	8002ad4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d19a      	bne.n	80025d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f974 	bl	8002990 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e01a      	b.n	80026e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2220      	movs	r2, #32
 80026b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_I2C_Mem_Read+0x230>)
 80026c6:	400b      	ands	r3, r1
 80026c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	80002400 	.word	0x80002400
 80026f4:	fe00e800 	.word	0xfe00e800

080026f8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	4608      	mov	r0, r1
 8002702:	4611      	mov	r1, r2
 8002704:	461a      	mov	r2, r3
 8002706:	4603      	mov	r3, r0
 8002708:	817b      	strh	r3, [r7, #10]
 800270a:	460b      	mov	r3, r1
 800270c:	813b      	strh	r3, [r7, #8]
 800270e:	4613      	mov	r3, r2
 8002710:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	8979      	ldrh	r1, [r7, #10]
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <I2C_RequestMemoryWrite+0xa4>)
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f9d7 	bl	8002ad4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	69b9      	ldr	r1, [r7, #24]
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f8f0 	bl	8002910 <I2C_WaitOnTXISFlagUntilTimeout>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e02c      	b.n	8002794 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002740:	893b      	ldrh	r3, [r7, #8]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	629a      	str	r2, [r3, #40]	; 0x28
 800274a:	e015      	b.n	8002778 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800274c:	893b      	ldrh	r3, [r7, #8]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	b29b      	uxth	r3, r3
 8002752:	b2da      	uxtb	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	69b9      	ldr	r1, [r7, #24]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f8d6 	bl	8002910 <I2C_WaitOnTXISFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e012      	b.n	8002794 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800276e:	893b      	ldrh	r3, [r7, #8]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2200      	movs	r2, #0
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f884 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	80002000 	.word	0x80002000

080027a0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	817b      	strh	r3, [r7, #10]
 80027b2:	460b      	mov	r3, r1
 80027b4:	813b      	strh	r3, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <I2C_RequestMemoryRead+0xa4>)
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f984 	bl	8002ad4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f89d 	bl	8002910 <I2C_WaitOnTXISFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e02c      	b.n	800283a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d105      	bne.n	80027f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027e6:	893b      	ldrh	r3, [r7, #8]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
 80027f0:	e015      	b.n	800281e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027f2:	893b      	ldrh	r3, [r7, #8]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	69b9      	ldr	r1, [r7, #24]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f883 	bl	8002910 <I2C_WaitOnTXISFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e012      	b.n	800283a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002814:	893b      	ldrh	r3, [r7, #8]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	2200      	movs	r2, #0
 8002826:	2140      	movs	r1, #64	; 0x40
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f831 	bl	8002890 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	80002000 	.word	0x80002000

08002848 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d103      	bne.n	8002866 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d007      	beq.n	8002884 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	619a      	str	r2, [r3, #24]
  }
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a0:	e022      	b.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d01e      	beq.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7ff f9bb 	bl	8001c24 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d113      	bne.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e00f      	b.n	8002908 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4013      	ands	r3, r2
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	429a      	cmp	r2, r3
 8002904:	d0cd      	beq.n	80028a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800291c:	e02c      	b.n	8002978 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f870 	bl	8002a08 <I2C_IsAcknowledgeFailed>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e02a      	b.n	8002988 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d01e      	beq.n	8002978 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293a:	f7ff f973 	bl	8001c24 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	429a      	cmp	r2, r3
 8002948:	d302      	bcc.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d113      	bne.n	8002978 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002954:	f043 0220 	orr.w	r2, r3, #32
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e007      	b.n	8002988 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b02      	cmp	r3, #2
 8002984:	d1cb      	bne.n	800291e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299c:	e028      	b.n	80029f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f830 	bl	8002a08 <I2C_IsAcknowledgeFailed>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e026      	b.n	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7ff f937 	bl	8001c24 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d113      	bne.n	80029f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e007      	b.n	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d1cf      	bne.n	800299e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d151      	bne.n	8002ac6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a22:	e022      	b.n	8002a6a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2a:	d01e      	beq.n	8002a6a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2c:	f7ff f8fa 	bl	8001c24 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d302      	bcc.n	8002a42 <I2C_IsAcknowledgeFailed+0x3a>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d113      	bne.n	8002a6a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e02e      	b.n	8002ac8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d1d5      	bne.n	8002a24 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2220      	movs	r2, #32
 8002a86:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff fedd 	bl	8002848 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002a9a:	400b      	ands	r3, r1
 8002a9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f043 0204 	orr.w	r2, r3, #4
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	fe00e800 	.word	0xfe00e800

08002ad4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	817b      	strh	r3, [r7, #10]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	0d5b      	lsrs	r3, r3, #21
 8002af0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002af4:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <I2C_TransferConfig+0x58>)
 8002af6:	430b      	orrs	r3, r1
 8002af8:	43db      	mvns	r3, r3
 8002afa:	ea02 0103 	and.w	r1, r2, r3
 8002afe:	897b      	ldrh	r3, [r7, #10]
 8002b00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b04:	7a7b      	ldrb	r3, [r7, #9]
 8002b06:	041b      	lsls	r3, r3, #16
 8002b08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	03ff63ff 	.word	0x03ff63ff

08002b30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d138      	bne.n	8002bb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e032      	b.n	8002bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	; 0x24
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0201 	bic.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	d139      	bne.n	8002c50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e033      	b.n	8002c52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2224      	movs	r2, #36	; 0x24
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e000      	b.n	8002c52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
  }
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d141      	bne.n	8002cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c6e:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7a:	d131      	bne.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c7c:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c82:	4a46      	ldr	r2, [pc, #280]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c8c:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c94:	4a41      	ldr	r2, [pc, #260]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c9c:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2232      	movs	r2, #50	; 0x32
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	4a3f      	ldr	r2, [pc, #252]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	0c9b      	lsrs	r3, r3, #18
 8002cae:	3301      	adds	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cb2:	e002      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc6:	d102      	bne.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f2      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cce:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d158      	bne.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e057      	b.n	8002d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ce0:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cf0:	e04d      	b.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf8:	d141      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cfa:	4b28      	ldr	r3, [pc, #160]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d06:	d131      	bne.n	8002d6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d08:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0e:	4a23      	ldr	r2, [pc, #140]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d20:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2232      	movs	r2, #50	; 0x32
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	0c9b      	lsrs	r3, r3, #18
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d3e:	e002      	b.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d52:	d102      	bne.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f2      	bne.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d66:	d112      	bne.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e011      	b.n	8002d90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d7c:	e007      	b.n	8002d8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d86:	4a05      	ldr	r2, [pc, #20]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	20000000 	.word	0x20000000
 8002da4:	431bde83 	.word	0x431bde83

08002da8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db6:	6093      	str	r3, [r2, #8]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40007000 	.word	0x40007000

08002dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e308      	b.n	80033ec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d075      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de6:	4ba3      	ldr	r3, [pc, #652]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df0:	4ba0      	ldr	r3, [pc, #640]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d102      	bne.n	8002e06 <HAL_RCC_OscConfig+0x3e>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_OscConfig+0x44>
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	4b99      	ldr	r3, [pc, #612]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05b      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x108>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d157      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e2e3      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2c:	d106      	bne.n	8002e3c <HAL_RCC_OscConfig+0x74>
 8002e2e:	4b91      	ldr	r3, [pc, #580]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a90      	ldr	r2, [pc, #576]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e01d      	b.n	8002e78 <HAL_RCC_OscConfig+0xb0>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e44:	d10c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x98>
 8002e46:	4b8b      	ldr	r3, [pc, #556]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a8a      	ldr	r2, [pc, #552]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	4b88      	ldr	r3, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a87      	ldr	r2, [pc, #540]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0xb0>
 8002e60:	4b84      	ldr	r3, [pc, #528]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a83      	ldr	r2, [pc, #524]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	4b81      	ldr	r3, [pc, #516]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a80      	ldr	r2, [pc, #512]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe fed0 	bl	8001c24 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fe fecc 	bl	8001c24 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e2a8      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9a:	4b76      	ldr	r3, [pc, #472]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0xc0>
 8002ea6:	e014      	b.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe febc 	bl	8001c24 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fe feb8 	bl	8001c24 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b64      	cmp	r3, #100	; 0x64
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e294      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec2:	4b6c      	ldr	r3, [pc, #432]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xe8>
 8002ece:	e000      	b.n	8002ed2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d075      	beq.n	8002fca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ede:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee8:	4b62      	ldr	r3, [pc, #392]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	d102      	bne.n	8002efe <HAL_RCC_OscConfig+0x136>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d002      	beq.n	8002f04 <HAL_RCC_OscConfig+0x13c>
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11f      	bne.n	8002f44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f04:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x154>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e267      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b55      	ldr	r3, [pc, #340]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	4952      	ldr	r1, [pc, #328]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f30:	4b51      	ldr	r3, [pc, #324]	; (8003078 <HAL_RCC_OscConfig+0x2b0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fe29 	bl	8001b8c <HAL_InitTick>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d043      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e253      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d023      	beq.n	8002f94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4c:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a48      	ldr	r2, [pc, #288]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fe64 	bl	8001c24 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f60:	f7fe fe60 	bl	8001c24 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e23c      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f72:	4b40      	ldr	r3, [pc, #256]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	4939      	ldr	r1, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
 8002f92:	e01a      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f94:	4b37      	ldr	r3, [pc, #220]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a36      	ldr	r2, [pc, #216]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fe40 	bl	8001c24 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fe3c 	bl	8001c24 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e218      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fba:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x1e0>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d03c      	beq.n	8003050 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01c      	beq.n	8003018 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fde:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe4:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fe fe19 	bl	8001c24 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7fe fe15 	bl	8001c24 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1f1      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003008:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 800300a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ef      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x22e>
 8003016:	e01b      	b.n	8003050 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b16      	ldr	r3, [pc, #88]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	f023 0301 	bic.w	r3, r3, #1
 8003024:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fe fdfc 	bl	8001c24 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003030:	f7fe fdf8 	bl	8001c24 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e1d4      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ef      	bne.n	8003030 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80ab 	beq.w	80031b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_RCC_OscConfig+0x2b4>
 800306e:	2301      	movs	r3, #1
 8003070:	e005      	b.n	800307e <HAL_RCC_OscConfig+0x2b6>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	20000004 	.word	0x20000004
 800307c:	2300      	movs	r3, #0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	4baf      	ldr	r3, [pc, #700]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	4aae      	ldr	r2, [pc, #696]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	; 0x58
 800308e:	4bac      	ldr	r3, [pc, #688]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800309a:	2301      	movs	r3, #1
 800309c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309e:	4ba9      	ldr	r3, [pc, #676]	; (8003344 <HAL_RCC_OscConfig+0x57c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d118      	bne.n	80030dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030aa:	4ba6      	ldr	r3, [pc, #664]	; (8003344 <HAL_RCC_OscConfig+0x57c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4aa5      	ldr	r2, [pc, #660]	; (8003344 <HAL_RCC_OscConfig+0x57c>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b6:	f7fe fdb5 	bl	8001c24 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030be:	f7fe fdb1 	bl	8001c24 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e18d      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d0:	4b9c      	ldr	r3, [pc, #624]	; (8003344 <HAL_RCC_OscConfig+0x57c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d108      	bne.n	80030f6 <HAL_RCC_OscConfig+0x32e>
 80030e4:	4b96      	ldr	r3, [pc, #600]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	4a95      	ldr	r2, [pc, #596]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f4:	e024      	b.n	8003140 <HAL_RCC_OscConfig+0x378>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d110      	bne.n	8003120 <HAL_RCC_OscConfig+0x358>
 80030fe:	4b90      	ldr	r3, [pc, #576]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	4a8e      	ldr	r2, [pc, #568]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003106:	f043 0304 	orr.w	r3, r3, #4
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800310e:	4b8c      	ldr	r3, [pc, #560]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	4a8a      	ldr	r2, [pc, #552]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800311e:	e00f      	b.n	8003140 <HAL_RCC_OscConfig+0x378>
 8003120:	4b87      	ldr	r3, [pc, #540]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	4a86      	ldr	r2, [pc, #536]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003130:	4b83      	ldr	r3, [pc, #524]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	4a82      	ldr	r2, [pc, #520]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003138:	f023 0304 	bic.w	r3, r3, #4
 800313c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d016      	beq.n	8003176 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fd6c 	bl	8001c24 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fe fd68 	bl	8001c24 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e142      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003166:	4b76      	ldr	r3, [pc, #472]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0ed      	beq.n	8003150 <HAL_RCC_OscConfig+0x388>
 8003174:	e015      	b.n	80031a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe fd55 	bl	8001c24 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fd51 	bl	8001c24 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e12b      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003194:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ed      	bne.n	800317e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a2:	7ffb      	ldrb	r3, [r7, #31]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	4a64      	ldr	r2, [pc, #400]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d03c      	beq.n	800323a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01c      	beq.n	8003202 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031c8:	4b5d      	ldr	r3, [pc, #372]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80031ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ce:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe fd24 	bl	8001c24 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e0:	f7fe fd20 	bl	8001c24 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0fc      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031f2:	4b53      	ldr	r3, [pc, #332]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80031f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0ef      	beq.n	80031e0 <HAL_RCC_OscConfig+0x418>
 8003200:	e01b      	b.n	800323a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003202:	4b4f      	ldr	r3, [pc, #316]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003208:	4a4d      	ldr	r2, [pc, #308]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe fd07 	bl	8001c24 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800321a:	f7fe fd03 	bl	8001c24 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e0df      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800322c:	4b44      	ldr	r3, [pc, #272]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 800322e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ef      	bne.n	800321a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 80d3 	beq.w	80033ea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003244:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b0c      	cmp	r3, #12
 800324e:	f000 808d 	beq.w	800336c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d15a      	bne.n	8003310 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003260:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fe fcdd 	bl	8001c24 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326e:	f7fe fcd9 	bl	8001c24 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0b5      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003280:	4b2f      	ldr	r3, [pc, #188]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1f0      	bne.n	800326e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800328c:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_OscConfig+0x580>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6a11      	ldr	r1, [r2, #32]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800329c:	3a01      	subs	r2, #1
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	4311      	orrs	r1, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032a6:	0212      	lsls	r2, r2, #8
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ae:	0852      	lsrs	r2, r2, #1
 80032b0:	3a01      	subs	r2, #1
 80032b2:	0552      	lsls	r2, r2, #21
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	3a01      	subs	r2, #1
 80032be:	0652      	lsls	r2, r2, #25
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032c6:	06d2      	lsls	r2, r2, #27
 80032c8:	430a      	orrs	r2, r1
 80032ca:	491d      	ldr	r1, [pc, #116]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1a      	ldr	r2, [pc, #104]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80032d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4a17      	ldr	r2, [pc, #92]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe fc9c 	bl	8001c24 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fe fc98 	bl	8001c24 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e074      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x528>
 800330e:	e06c      	b.n	80033ea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800331a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a04      	ldr	r2, [pc, #16]	; (8003340 <HAL_RCC_OscConfig+0x578>)
 800332e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003336:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fe fc74 	bl	8001c24 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800333e:	e00e      	b.n	800335e <HAL_RCC_OscConfig+0x596>
 8003340:	40021000 	.word	0x40021000
 8003344:	40007000 	.word	0x40007000
 8003348:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe fc6a 	bl	8001c24 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e046      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335e:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x62c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x584>
 800336a:	e03e      	b.n	80033ea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e039      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_RCC_OscConfig+0x62c>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	429a      	cmp	r2, r3
 800338a:	d12c      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	3b01      	subs	r3, #1
 8003398:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d123      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d11b      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d113      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	3b01      	subs	r3, #1
 80033cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d109      	bne.n	80033e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3720      	adds	r7, #32
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000

080033f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e11e      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003410:	4b91      	ldr	r3, [pc, #580]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d910      	bls.n	8003440 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341e:	4b8e      	ldr	r3, [pc, #568]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f023 020f 	bic.w	r2, r3, #15
 8003426:	498c      	ldr	r1, [pc, #560]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800342e:	4b8a      	ldr	r3, [pc, #552]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d001      	beq.n	8003440 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e106      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d073      	beq.n	8003534 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d129      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003454:	4b81      	ldr	r3, [pc, #516]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0f4      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003464:	f000 f99e 	bl	80037a4 <RCC_GetSysClockFreqFromPLLSource>
 8003468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4a7c      	ldr	r2, [pc, #496]	; (8003660 <HAL_RCC_ClockConfig+0x268>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d93f      	bls.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003472:	4b7a      	ldr	r3, [pc, #488]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003486:	2b00      	cmp	r3, #0
 8003488:	d033      	beq.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800348e:	2b00      	cmp	r3, #0
 8003490:	d12f      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003492:	4b72      	ldr	r3, [pc, #456]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800349a:	4a70      	ldr	r2, [pc, #448]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 800349c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e024      	b.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d107      	bne.n	80034c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d109      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0c6      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034c0:	4b66      	ldr	r3, [pc, #408]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0be      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034d0:	f000 f8ce 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4a61      	ldr	r2, [pc, #388]	; (8003660 <HAL_RCC_ClockConfig+0x268>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d909      	bls.n	80034f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034de:	4b5f      	ldr	r3, [pc, #380]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034e6:	4a5d      	ldr	r2, [pc, #372]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 80034e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034ee:	2380      	movs	r3, #128	; 0x80
 80034f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b5a      	ldr	r3, [pc, #360]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4957      	ldr	r1, [pc, #348]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fe fb8e 	bl	8001c24 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe fb8a 	bl	8001c24 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e095      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b4e      	ldr	r3, [pc, #312]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d023      	beq.n	8003588 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a42      	ldr	r2, [pc, #264]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003552:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003556:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003564:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800356c:	4a3b      	ldr	r2, [pc, #236]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 800356e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003572:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b39      	ldr	r3, [pc, #228]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4936      	ldr	r1, [pc, #216]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
 8003586:	e008      	b.n	800359a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d105      	bne.n	800359a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800358e:	4b33      	ldr	r3, [pc, #204]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4a32      	ldr	r2, [pc, #200]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003598:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800359a:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d21d      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a8:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f023 020f 	bic.w	r2, r3, #15
 80035b0:	4929      	ldr	r1, [pc, #164]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035b8:	f7fe fb34 	bl	8001c24 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7fe fb30 	bl	8001c24 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e03b      	b.n	800364e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <HAL_RCC_ClockConfig+0x260>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1ed      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b1a      	ldr	r3, [pc, #104]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4917      	ldr	r1, [pc, #92]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490f      	ldr	r1, [pc, #60]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003622:	f000 f825 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 8003626:	4601      	mov	r1, r0
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_RCC_ClockConfig+0x264>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <HAL_RCC_ClockConfig+0x26c>)
 8003634:	5cd3      	ldrb	r3, [r2, r3]
 8003636:	f003 031f 	and.w	r3, r3, #31
 800363a:	fa21 f303 	lsr.w	r3, r1, r3
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <HAL_RCC_ClockConfig+0x270>)
 8003640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003642:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_RCC_ClockConfig+0x274>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe faa0 	bl	8001b8c <HAL_InitTick>
 800364c:	4603      	mov	r3, r0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40022000 	.word	0x40022000
 800365c:	40021000 	.word	0x40021000
 8003660:	04c4b400 	.word	0x04c4b400
 8003664:	08004a80 	.word	0x08004a80
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004

08003670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003676:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b04      	cmp	r3, #4
 8003680:	d102      	bne.n	8003688 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003682:	4b2a      	ldr	r3, [pc, #168]	; (800372c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	e047      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003688:	4b27      	ldr	r3, [pc, #156]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
 8003690:	2b08      	cmp	r3, #8
 8003692:	d102      	bne.n	800369a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003694:	4b26      	ldr	r3, [pc, #152]	; (8003730 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	e03e      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800369a:	4b23      	ldr	r3, [pc, #140]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d136      	bne.n	8003714 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3301      	adds	r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d10c      	bne.n	80036de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c4:	4a1a      	ldr	r2, [pc, #104]	; (8003730 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036cc:	4a16      	ldr	r2, [pc, #88]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ce:	68d2      	ldr	r2, [r2, #12]
 80036d0:	0a12      	lsrs	r2, r2, #8
 80036d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	617b      	str	r3, [r7, #20]
      break;
 80036dc:	e00c      	b.n	80036f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <HAL_RCC_GetSysClockFreq+0xbc>)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	4a10      	ldr	r2, [pc, #64]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e8:	68d2      	ldr	r2, [r2, #12]
 80036ea:	0a12      	lsrs	r2, r2, #8
 80036ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036f0:	fb02 f303 	mul.w	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]
      break;
 80036f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0e5b      	lsrs	r3, r3, #25
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	e001      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003718:	693b      	ldr	r3, [r7, #16]
}
 800371a:	4618      	mov	r0, r3
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	00f42400 	.word	0x00f42400
 8003730:	007a1200 	.word	0x007a1200

08003734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_RCC_GetHCLKFreq+0x14>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000000 	.word	0x20000000

0800374c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003750:	f7ff fff0 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003754:	4601      	mov	r1, r0
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	fa21 f303 	lsr.w	r3, r1, r3
}
 800376c:	4618      	mov	r0, r3
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	08004a90 	.word	0x08004a90

08003778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800377c:	f7ff ffda 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003780:	4601      	mov	r1, r0
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	0adb      	lsrs	r3, r3, #11
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800378e:	5cd3      	ldrb	r3, [r2, r3]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	08004a90 	.word	0x08004a90

080037a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037aa:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3301      	adds	r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d10c      	bne.n	80037e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037c8:	4a17      	ldr	r2, [pc, #92]	; (8003828 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037d2:	68d2      	ldr	r2, [r2, #12]
 80037d4:	0a12      	lsrs	r2, r2, #8
 80037d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037da:	fb02 f303 	mul.w	r3, r2, r3
 80037de:	617b      	str	r3, [r7, #20]
    break;
 80037e0:	e00c      	b.n	80037fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037e2:	4a12      	ldr	r2, [pc, #72]	; (800382c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ea:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ec:	68d2      	ldr	r2, [r2, #12]
 80037ee:	0a12      	lsrs	r2, r2, #8
 80037f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]
    break;
 80037fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	0e5b      	lsrs	r3, r3, #25
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	3301      	adds	r3, #1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003816:	687b      	ldr	r3, [r7, #4]
}
 8003818:	4618      	mov	r0, r3
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40021000 	.word	0x40021000
 8003828:	007a1200 	.word	0x007a1200
 800382c:	00f42400 	.word	0x00f42400

08003830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003838:	2300      	movs	r3, #0
 800383a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800383c:	2300      	movs	r3, #0
 800383e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8098 	beq.w	800397e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b43      	ldr	r3, [pc, #268]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10d      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	4b40      	ldr	r3, [pc, #256]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003868:	6593      	str	r3, [r2, #88]	; 0x58
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003876:	2301      	movs	r3, #1
 8003878:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800387a:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a39      	ldr	r2, [pc, #228]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003886:	f7fe f9cd 	bl	8001c24 <HAL_GetTick>
 800388a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800388c:	e009      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fe f9c9 	bl	8001c24 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d902      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	74fb      	strb	r3, [r7, #19]
        break;
 80038a0:	e005      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038a2:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ef      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d159      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01e      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d019      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038d0:	4b23      	ldr	r3, [pc, #140]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038dc:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038ec:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038fc:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d016      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390e:	f7fe f989 	bl	8001c24 <HAL_GetTick>
 8003912:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003914:	e00b      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003916:	f7fe f985 	bl	8001c24 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f241 3288 	movw	r2, #5000	; 0x1388
 8003924:	4293      	cmp	r3, r2
 8003926:	d902      	bls.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	74fb      	strb	r3, [r7, #19]
            break;
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ec      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	4903      	ldr	r1, [pc, #12]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003958:	e008      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	74bb      	strb	r3, [r7, #18]
 800395e:	e005      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003960:	40021000 	.word	0x40021000
 8003964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800396c:	7c7b      	ldrb	r3, [r7, #17]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003972:	4ba6      	ldr	r3, [pc, #664]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	4aa5      	ldr	r2, [pc, #660]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800398a:	4ba0      	ldr	r3, [pc, #640]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f023 0203 	bic.w	r2, r3, #3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	499c      	ldr	r1, [pc, #624]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039ac:	4b97      	ldr	r3, [pc, #604]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b2:	f023 020c 	bic.w	r2, r3, #12
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4994      	ldr	r1, [pc, #592]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039ce:	4b8f      	ldr	r3, [pc, #572]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	498b      	ldr	r1, [pc, #556]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039f0:	4b86      	ldr	r3, [pc, #536]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	4983      	ldr	r1, [pc, #524]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a12:	4b7e      	ldr	r3, [pc, #504]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	497a      	ldr	r1, [pc, #488]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a34:	4b75      	ldr	r3, [pc, #468]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	4972      	ldr	r1, [pc, #456]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a56:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4969      	ldr	r1, [pc, #420]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a78:	4b64      	ldr	r3, [pc, #400]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	4961      	ldr	r1, [pc, #388]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a9a:	4b5c      	ldr	r3, [pc, #368]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	4958      	ldr	r1, [pc, #352]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	4950      	ldr	r1, [pc, #320]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003adc:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003af4:	4b45      	ldr	r3, [pc, #276]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	4942      	ldr	r1, [pc, #264]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b14:	4b3d      	ldr	r3, [pc, #244]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a3c      	ldr	r2, [pc, #240]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b1e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b2c:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4934      	ldr	r1, [pc, #208]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b4c:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a2e      	ldr	r2, [pc, #184]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b56:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b72:	4926      	ldr	r1, [pc, #152]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b82:	d105      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	4918      	ldr	r1, [pc, #96]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bbc:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d015      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be2:	490a      	ldr	r1, [pc, #40]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf2:	d105      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4a04      	ldr	r2, [pc, #16]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c00:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000

08003c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e042      	b.n	8003ca8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fc ff11 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2224      	movs	r2, #36	; 0x24
 8003c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f992 	bl	8003f7c <UART_SetConfig>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e022      	b.n	8003ca8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fc2e 	bl	80044cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fcb5 	bl	8004610 <UART_CheckIdleState>
 8003ca6:	4603      	mov	r3, r0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	; 0x28
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	f040 8083 	bne.w	8003dd2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_UART_Transmit+0x28>
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e07b      	b.n	8003dd4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Transmit+0x3a>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e074      	b.n	8003dd4 <HAL_UART_Transmit+0x124>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2221      	movs	r2, #33	; 0x21
 8003cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d02:	f7fd ff8f 	bl	8001c24 <HAL_GetTick>
 8003d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	d108      	bne.n	8003d34 <HAL_UART_Transmit+0x84>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e003      	b.n	8003d3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003d44:	e02c      	b.n	8003da0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fca5 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e039      	b.n	8003dd4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10b      	bne.n	8003d7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	3302      	adds	r3, #2
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	e007      	b.n	8003d8e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1cc      	bne.n	8003d46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2140      	movs	r1, #64	; 0x40
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fc72 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e006      	b.n	8003dd4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	; 0x28
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	f040 80bd 	bne.w	8003f72 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_UART_Receive+0x28>
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0b5      	b.n	8003f74 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Receive+0x3a>
 8003e12:	2302      	movs	r3, #2
 8003e14:	e0ae      	b.n	8003f74 <HAL_UART_Receive+0x198>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2222      	movs	r2, #34	; 0x22
 8003e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e2e:	f7fd fef9 	bl	8001c24 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	88fa      	ldrh	r2, [r7, #6]
 8003e40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d10e      	bne.n	8003e6c <HAL_UART_Receive+0x90>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_UART_Receive+0x86>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e60:	e02d      	b.n	8003ebe <HAL_UART_Receive+0xe2>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e6a:	e028      	b.n	8003ebe <HAL_UART_Receive+0xe2>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_UART_Receive+0xb4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_UART_Receive+0xaa>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	22ff      	movs	r2, #255	; 0xff
 8003e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e84:	e01b      	b.n	8003ebe <HAL_UART_Receive+0xe2>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	227f      	movs	r2, #127	; 0x7f
 8003e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e8e:	e016      	b.n	8003ebe <HAL_UART_Receive+0xe2>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e98:	d10d      	bne.n	8003eb6 <HAL_UART_Receive+0xda>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <HAL_UART_Receive+0xd0>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	227f      	movs	r2, #127	; 0x7f
 8003ea6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eaa:	e008      	b.n	8003ebe <HAL_UART_Receive+0xe2>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	223f      	movs	r2, #63	; 0x3f
 8003eb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eb4:	e003      	b.n	8003ebe <HAL_UART_Receive+0xe2>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ec4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ece:	d108      	bne.n	8003ee2 <HAL_UART_Receive+0x106>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	e003      	b.n	8003eea <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ef2:	e032      	b.n	8003f5a <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	2200      	movs	r2, #0
 8003efc:	2120      	movs	r1, #32
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fbce 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e032      	b.n	8003f74 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10c      	bne.n	8003f2e <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	8a7b      	ldrh	r3, [r7, #18]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	3302      	adds	r3, #2
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	e00c      	b.n	8003f48 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	8a7b      	ldrh	r3, [r7, #18]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3301      	adds	r3, #1
 8003f46:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1c6      	bne.n	8003ef4 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
  }
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003f80:	b088      	sub	sp, #32
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	4bb0      	ldr	r3, [pc, #704]	; (8004274 <UART_SetConfig+0x2f8>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	69f9      	ldr	r1, [r7, #28]
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4aa5      	ldr	r2, [pc, #660]	; (8004278 <UART_SetConfig+0x2fc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ffa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	69f9      	ldr	r1, [r7, #28]
 8004004:	430b      	orrs	r3, r1
 8004006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	f023 010f 	bic.w	r1, r3, #15
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a96      	ldr	r2, [pc, #600]	; (800427c <UART_SetConfig+0x300>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d121      	bne.n	800406c <UART_SetConfig+0xf0>
 8004028:	4b95      	ldr	r3, [pc, #596]	; (8004280 <UART_SetConfig+0x304>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b03      	cmp	r3, #3
 8004034:	d816      	bhi.n	8004064 <UART_SetConfig+0xe8>
 8004036:	a201      	add	r2, pc, #4	; (adr r2, 800403c <UART_SetConfig+0xc0>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	0800404d 	.word	0x0800404d
 8004040:	08004059 	.word	0x08004059
 8004044:	08004053 	.word	0x08004053
 8004048:	0800405f 	.word	0x0800405f
 800404c:	2301      	movs	r3, #1
 800404e:	76fb      	strb	r3, [r7, #27]
 8004050:	e0be      	b.n	80041d0 <UART_SetConfig+0x254>
 8004052:	2302      	movs	r3, #2
 8004054:	76fb      	strb	r3, [r7, #27]
 8004056:	e0bb      	b.n	80041d0 <UART_SetConfig+0x254>
 8004058:	2304      	movs	r3, #4
 800405a:	76fb      	strb	r3, [r7, #27]
 800405c:	e0b8      	b.n	80041d0 <UART_SetConfig+0x254>
 800405e:	2308      	movs	r3, #8
 8004060:	76fb      	strb	r3, [r7, #27]
 8004062:	e0b5      	b.n	80041d0 <UART_SetConfig+0x254>
 8004064:	2310      	movs	r3, #16
 8004066:	76fb      	strb	r3, [r7, #27]
 8004068:	bf00      	nop
 800406a:	e0b1      	b.n	80041d0 <UART_SetConfig+0x254>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a84      	ldr	r2, [pc, #528]	; (8004284 <UART_SetConfig+0x308>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d134      	bne.n	80040e0 <UART_SetConfig+0x164>
 8004076:	4b82      	ldr	r3, [pc, #520]	; (8004280 <UART_SetConfig+0x304>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d829      	bhi.n	80040d8 <UART_SetConfig+0x15c>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0x110>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040c1 	.word	0x080040c1
 8004090:	080040d9 	.word	0x080040d9
 8004094:	080040d9 	.word	0x080040d9
 8004098:	080040d9 	.word	0x080040d9
 800409c:	080040cd 	.word	0x080040cd
 80040a0:	080040d9 	.word	0x080040d9
 80040a4:	080040d9 	.word	0x080040d9
 80040a8:	080040d9 	.word	0x080040d9
 80040ac:	080040c7 	.word	0x080040c7
 80040b0:	080040d9 	.word	0x080040d9
 80040b4:	080040d9 	.word	0x080040d9
 80040b8:	080040d9 	.word	0x080040d9
 80040bc:	080040d3 	.word	0x080040d3
 80040c0:	2300      	movs	r3, #0
 80040c2:	76fb      	strb	r3, [r7, #27]
 80040c4:	e084      	b.n	80041d0 <UART_SetConfig+0x254>
 80040c6:	2302      	movs	r3, #2
 80040c8:	76fb      	strb	r3, [r7, #27]
 80040ca:	e081      	b.n	80041d0 <UART_SetConfig+0x254>
 80040cc:	2304      	movs	r3, #4
 80040ce:	76fb      	strb	r3, [r7, #27]
 80040d0:	e07e      	b.n	80041d0 <UART_SetConfig+0x254>
 80040d2:	2308      	movs	r3, #8
 80040d4:	76fb      	strb	r3, [r7, #27]
 80040d6:	e07b      	b.n	80041d0 <UART_SetConfig+0x254>
 80040d8:	2310      	movs	r3, #16
 80040da:	76fb      	strb	r3, [r7, #27]
 80040dc:	bf00      	nop
 80040de:	e077      	b.n	80041d0 <UART_SetConfig+0x254>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a68      	ldr	r2, [pc, #416]	; (8004288 <UART_SetConfig+0x30c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d120      	bne.n	800412c <UART_SetConfig+0x1b0>
 80040ea:	4b65      	ldr	r3, [pc, #404]	; (8004280 <UART_SetConfig+0x304>)
 80040ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d00f      	beq.n	8004118 <UART_SetConfig+0x19c>
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d802      	bhi.n	8004102 <UART_SetConfig+0x186>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <UART_SetConfig+0x190>
 8004100:	e010      	b.n	8004124 <UART_SetConfig+0x1a8>
 8004102:	2b20      	cmp	r3, #32
 8004104:	d005      	beq.n	8004112 <UART_SetConfig+0x196>
 8004106:	2b30      	cmp	r3, #48	; 0x30
 8004108:	d009      	beq.n	800411e <UART_SetConfig+0x1a2>
 800410a:	e00b      	b.n	8004124 <UART_SetConfig+0x1a8>
 800410c:	2300      	movs	r3, #0
 800410e:	76fb      	strb	r3, [r7, #27]
 8004110:	e05e      	b.n	80041d0 <UART_SetConfig+0x254>
 8004112:	2302      	movs	r3, #2
 8004114:	76fb      	strb	r3, [r7, #27]
 8004116:	e05b      	b.n	80041d0 <UART_SetConfig+0x254>
 8004118:	2304      	movs	r3, #4
 800411a:	76fb      	strb	r3, [r7, #27]
 800411c:	e058      	b.n	80041d0 <UART_SetConfig+0x254>
 800411e:	2308      	movs	r3, #8
 8004120:	76fb      	strb	r3, [r7, #27]
 8004122:	e055      	b.n	80041d0 <UART_SetConfig+0x254>
 8004124:	2310      	movs	r3, #16
 8004126:	76fb      	strb	r3, [r7, #27]
 8004128:	bf00      	nop
 800412a:	e051      	b.n	80041d0 <UART_SetConfig+0x254>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a56      	ldr	r2, [pc, #344]	; (800428c <UART_SetConfig+0x310>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d120      	bne.n	8004178 <UART_SetConfig+0x1fc>
 8004136:	4b52      	ldr	r3, [pc, #328]	; (8004280 <UART_SetConfig+0x304>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004140:	2b40      	cmp	r3, #64	; 0x40
 8004142:	d00f      	beq.n	8004164 <UART_SetConfig+0x1e8>
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	d802      	bhi.n	800414e <UART_SetConfig+0x1d2>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <UART_SetConfig+0x1dc>
 800414c:	e010      	b.n	8004170 <UART_SetConfig+0x1f4>
 800414e:	2b80      	cmp	r3, #128	; 0x80
 8004150:	d005      	beq.n	800415e <UART_SetConfig+0x1e2>
 8004152:	2bc0      	cmp	r3, #192	; 0xc0
 8004154:	d009      	beq.n	800416a <UART_SetConfig+0x1ee>
 8004156:	e00b      	b.n	8004170 <UART_SetConfig+0x1f4>
 8004158:	2300      	movs	r3, #0
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	e038      	b.n	80041d0 <UART_SetConfig+0x254>
 800415e:	2302      	movs	r3, #2
 8004160:	76fb      	strb	r3, [r7, #27]
 8004162:	e035      	b.n	80041d0 <UART_SetConfig+0x254>
 8004164:	2304      	movs	r3, #4
 8004166:	76fb      	strb	r3, [r7, #27]
 8004168:	e032      	b.n	80041d0 <UART_SetConfig+0x254>
 800416a:	2308      	movs	r3, #8
 800416c:	76fb      	strb	r3, [r7, #27]
 800416e:	e02f      	b.n	80041d0 <UART_SetConfig+0x254>
 8004170:	2310      	movs	r3, #16
 8004172:	76fb      	strb	r3, [r7, #27]
 8004174:	bf00      	nop
 8004176:	e02b      	b.n	80041d0 <UART_SetConfig+0x254>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a3e      	ldr	r2, [pc, #248]	; (8004278 <UART_SetConfig+0x2fc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d124      	bne.n	80041cc <UART_SetConfig+0x250>
 8004182:	4b3f      	ldr	r3, [pc, #252]	; (8004280 <UART_SetConfig+0x304>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004188:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d012      	beq.n	80041b8 <UART_SetConfig+0x23c>
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d802      	bhi.n	800419e <UART_SetConfig+0x222>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <UART_SetConfig+0x230>
 800419c:	e012      	b.n	80041c4 <UART_SetConfig+0x248>
 800419e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a2:	d006      	beq.n	80041b2 <UART_SetConfig+0x236>
 80041a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041a8:	d009      	beq.n	80041be <UART_SetConfig+0x242>
 80041aa:	e00b      	b.n	80041c4 <UART_SetConfig+0x248>
 80041ac:	2300      	movs	r3, #0
 80041ae:	76fb      	strb	r3, [r7, #27]
 80041b0:	e00e      	b.n	80041d0 <UART_SetConfig+0x254>
 80041b2:	2302      	movs	r3, #2
 80041b4:	76fb      	strb	r3, [r7, #27]
 80041b6:	e00b      	b.n	80041d0 <UART_SetConfig+0x254>
 80041b8:	2304      	movs	r3, #4
 80041ba:	76fb      	strb	r3, [r7, #27]
 80041bc:	e008      	b.n	80041d0 <UART_SetConfig+0x254>
 80041be:	2308      	movs	r3, #8
 80041c0:	76fb      	strb	r3, [r7, #27]
 80041c2:	e005      	b.n	80041d0 <UART_SetConfig+0x254>
 80041c4:	2310      	movs	r3, #16
 80041c6:	76fb      	strb	r3, [r7, #27]
 80041c8:	bf00      	nop
 80041ca:	e001      	b.n	80041d0 <UART_SetConfig+0x254>
 80041cc:	2310      	movs	r3, #16
 80041ce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a28      	ldr	r2, [pc, #160]	; (8004278 <UART_SetConfig+0x2fc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	f040 80a1 	bne.w	800431e <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041dc:	7efb      	ldrb	r3, [r7, #27]
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d823      	bhi.n	800422a <UART_SetConfig+0x2ae>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0x26c>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	0800422b 	.word	0x0800422b
 80041f0:	08004215 	.word	0x08004215
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800421b 	.word	0x0800421b
 80041fc:	0800422b 	.word	0x0800422b
 8004200:	0800422b 	.word	0x0800422b
 8004204:	0800422b 	.word	0x0800422b
 8004208:	08004223 	.word	0x08004223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7ff fa9e 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8004210:	6178      	str	r0, [r7, #20]
        break;
 8004212:	e00f      	b.n	8004234 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <UART_SetConfig+0x314>)
 8004216:	617b      	str	r3, [r7, #20]
        break;
 8004218:	e00c      	b.n	8004234 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7ff fa29 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800421e:	6178      	str	r0, [r7, #20]
        break;
 8004220:	e008      	b.n	8004234 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	617b      	str	r3, [r7, #20]
        break;
 8004228:	e004      	b.n	8004234 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	76bb      	strb	r3, [r7, #26]
        break;
 8004232:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8130 	beq.w	800449c <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <UART_SetConfig+0x318>)
 8004242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004246:	461a      	mov	r2, r3
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	fbb3 f3f2 	udiv	r3, r3, r2
 800424e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4413      	add	r3, r2
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	d305      	bcc.n	800426c <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d915      	bls.n	8004298 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	76bb      	strb	r3, [r7, #26]
 8004270:	e114      	b.n	800449c <UART_SetConfig+0x520>
 8004272:	bf00      	nop
 8004274:	cfff69f3 	.word	0xcfff69f3
 8004278:	40008000 	.word	0x40008000
 800427c:	40013800 	.word	0x40013800
 8004280:	40021000 	.word	0x40021000
 8004284:	40004400 	.word	0x40004400
 8004288:	40004800 	.word	0x40004800
 800428c:	40004c00 	.word	0x40004c00
 8004290:	00f42400 	.word	0x00f42400
 8004294:	08004a98 	.word	0x08004a98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4618      	mov	r0, r3
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	4a87      	ldr	r2, [pc, #540]	; (80044c4 <UART_SetConfig+0x548>)
 80042a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f04f 0400 	mov.w	r4, #0
 80042b0:	461a      	mov	r2, r3
 80042b2:	4623      	mov	r3, r4
 80042b4:	f7fb ffb0 	bl	8000218 <__aeabi_uldivmod>
 80042b8:	4603      	mov	r3, r0
 80042ba:	460c      	mov	r4, r1
 80042bc:	4619      	mov	r1, r3
 80042be:	4622      	mov	r2, r4
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	f04f 0400 	mov.w	r4, #0
 80042c8:	0214      	lsls	r4, r2, #8
 80042ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80042ce:	020b      	lsls	r3, r1, #8
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6852      	ldr	r2, [r2, #4]
 80042d4:	0852      	lsrs	r2, r2, #1
 80042d6:	4611      	mov	r1, r2
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	eb13 0b01 	adds.w	fp, r3, r1
 80042e0:	eb44 0c02 	adc.w	ip, r4, r2
 80042e4:	4658      	mov	r0, fp
 80042e6:	4661      	mov	r1, ip
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f04f 0400 	mov.w	r4, #0
 80042f0:	461a      	mov	r2, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	f7fb ff90 	bl	8000218 <__aeabi_uldivmod>
 80042f8:	4603      	mov	r3, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004304:	d308      	bcc.n	8004318 <UART_SetConfig+0x39c>
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430c:	d204      	bcs.n	8004318 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	e0c1      	b.n	800449c <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	76bb      	strb	r3, [r7, #26]
 800431c:	e0be      	b.n	800449c <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d164      	bne.n	80043f2 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8004328:	7efb      	ldrb	r3, [r7, #27]
 800432a:	2b08      	cmp	r3, #8
 800432c:	d827      	bhi.n	800437e <UART_SetConfig+0x402>
 800432e:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <UART_SetConfig+0x3b8>)
 8004330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004334:	08004359 	.word	0x08004359
 8004338:	08004361 	.word	0x08004361
 800433c:	08004369 	.word	0x08004369
 8004340:	0800437f 	.word	0x0800437f
 8004344:	0800436f 	.word	0x0800436f
 8004348:	0800437f 	.word	0x0800437f
 800434c:	0800437f 	.word	0x0800437f
 8004350:	0800437f 	.word	0x0800437f
 8004354:	08004377 	.word	0x08004377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004358:	f7ff f9f8 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 800435c:	6178      	str	r0, [r7, #20]
        break;
 800435e:	e013      	b.n	8004388 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004360:	f7ff fa0a 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 8004364:	6178      	str	r0, [r7, #20]
        break;
 8004366:	e00f      	b.n	8004388 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004368:	4b57      	ldr	r3, [pc, #348]	; (80044c8 <UART_SetConfig+0x54c>)
 800436a:	617b      	str	r3, [r7, #20]
        break;
 800436c:	e00c      	b.n	8004388 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436e:	f7ff f97f 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 8004372:	6178      	str	r0, [r7, #20]
        break;
 8004374:	e008      	b.n	8004388 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437a:	617b      	str	r3, [r7, #20]
        break;
 800437c:	e004      	b.n	8004388 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	76bb      	strb	r3, [r7, #26]
        break;
 8004386:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8086 	beq.w	800449c <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	4a4b      	ldr	r2, [pc, #300]	; (80044c4 <UART_SetConfig+0x548>)
 8004396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800439a:	461a      	mov	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fbb3 f3f2 	udiv	r3, r3, r2
 80043a2:	005a      	lsls	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	441a      	add	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	d916      	bls.n	80043ec <UART_SetConfig+0x470>
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c4:	d212      	bcs.n	80043ec <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f023 030f 	bic.w	r3, r3, #15
 80043ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	b29a      	uxth	r2, r3
 80043dc:	89fb      	ldrh	r3, [r7, #14]
 80043de:	4313      	orrs	r3, r2
 80043e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	89fa      	ldrh	r2, [r7, #14]
 80043e8:	60da      	str	r2, [r3, #12]
 80043ea:	e057      	b.n	800449c <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	76bb      	strb	r3, [r7, #26]
 80043f0:	e054      	b.n	800449c <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043f2:	7efb      	ldrb	r3, [r7, #27]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d828      	bhi.n	800444a <UART_SetConfig+0x4ce>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <UART_SetConfig+0x484>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004425 	.word	0x08004425
 8004404:	0800442d 	.word	0x0800442d
 8004408:	08004435 	.word	0x08004435
 800440c:	0800444b 	.word	0x0800444b
 8004410:	0800443b 	.word	0x0800443b
 8004414:	0800444b 	.word	0x0800444b
 8004418:	0800444b 	.word	0x0800444b
 800441c:	0800444b 	.word	0x0800444b
 8004420:	08004443 	.word	0x08004443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004424:	f7ff f992 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8004428:	6178      	str	r0, [r7, #20]
        break;
 800442a:	e013      	b.n	8004454 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800442c:	f7ff f9a4 	bl	8003778 <HAL_RCC_GetPCLK2Freq>
 8004430:	6178      	str	r0, [r7, #20]
        break;
 8004432:	e00f      	b.n	8004454 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <UART_SetConfig+0x54c>)
 8004436:	617b      	str	r3, [r7, #20]
        break;
 8004438:	e00c      	b.n	8004454 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7ff f919 	bl	8003670 <HAL_RCC_GetSysClockFreq>
 800443e:	6178      	str	r0, [r7, #20]
        break;
 8004440:	e008      	b.n	8004454 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004446:	617b      	str	r3, [r7, #20]
        break;
 8004448:	e004      	b.n	8004454 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	76bb      	strb	r3, [r7, #26]
        break;
 8004452:	bf00      	nop
    }

    if (pclk != 0U)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d020      	beq.n	800449c <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <UART_SetConfig+0x548>)
 8004460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004464:	461a      	mov	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	fbb3 f2f2 	udiv	r2, r3, r2
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	441a      	add	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	b29b      	uxth	r3, r3
 800447e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b0f      	cmp	r3, #15
 8004484:	d908      	bls.n	8004498 <UART_SetConfig+0x51c>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448c:	d204      	bcs.n	8004498 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	e001      	b.n	800449c <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80044b8:	7ebb      	ldrb	r3, [r7, #26]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3720      	adds	r7, #32
 80044be:	46bd      	mov	sp, r7
 80044c0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80044c4:	08004a98 	.word	0x08004a98
 80044c8:	00f42400 	.word	0x00f42400

080044cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ca:	d10a      	bne.n	80045e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af02      	add	r7, sp, #8
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004620:	f7fd fb00 	bl	8001c24 <HAL_GetTick>
 8004624:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d10e      	bne.n	8004652 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f82c 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e022      	b.n	8004698 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b04      	cmp	r3, #4
 800465e:	d10e      	bne.n	800467e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004660:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f816 	bl	80046a0 <UART_WaitOnFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e00c      	b.n	8004698 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	4613      	mov	r3, r2
 80046ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b0:	e062      	b.n	8004778 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d05e      	beq.n	8004778 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ba:	f7fd fab3 	bl	8001c24 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d302      	bcc.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d11d      	bne.n	800470c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e045      	b.n	8004798 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d02e      	beq.n	8004778 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004728:	d126      	bne.n	8004778 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004732:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004742:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0201 	bic.w	r2, r2, #1
 8004752:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e00f      	b.n	8004798 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4013      	ands	r3, r2
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	429a      	cmp	r2, r3
 8004794:	d08d      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e027      	b.n	8004806 <HAL_UARTEx_DisableFifoMode+0x66>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2224      	movs	r2, #36	; 0x24
 80047c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004826:	2302      	movs	r3, #2
 8004828:	e02d      	b.n	8004886 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2224      	movs	r2, #36	; 0x24
 8004836:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f850 	bl	800490c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e02d      	b.n	8004902 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2224      	movs	r2, #36	; 0x24
 80048b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f812 	bl	800490c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b089      	sub	sp, #36	; 0x24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004914:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <UARTEx_SetNbDataToProcess+0xc8>)
 8004916:	f107 0314 	add.w	r3, r7, #20
 800491a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800491e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004922:	4a2d      	ldr	r2, [pc, #180]	; (80049d8 <UARTEx_SetNbDataToProcess+0xcc>)
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800492c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004934:	2b00      	cmp	r3, #0
 8004936:	d108      	bne.n	800494a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004948:	e03d      	b.n	80049c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800494a:	2308      	movs	r3, #8
 800494c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800494e:	2308      	movs	r3, #8
 8004950:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	0e5b      	lsrs	r3, r3, #25
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	0f5b      	lsrs	r3, r3, #29
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004972:	7fbb      	ldrb	r3, [r7, #30]
 8004974:	7f3a      	ldrb	r2, [r7, #28]
 8004976:	f107 0120 	add.w	r1, r7, #32
 800497a:	440a      	add	r2, r1
 800497c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004980:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004984:	7f3a      	ldrb	r2, [r7, #28]
 8004986:	f107 0120 	add.w	r1, r7, #32
 800498a:	440a      	add	r2, r1
 800498c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004990:	fb93 f3f2 	sdiv	r3, r3, r2
 8004994:	b29a      	uxth	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800499c:	7ffb      	ldrb	r3, [r7, #31]
 800499e:	7f7a      	ldrb	r2, [r7, #29]
 80049a0:	f107 0120 	add.w	r1, r7, #32
 80049a4:	440a      	add	r2, r1
 80049a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80049aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049ae:	7f7a      	ldrb	r2, [r7, #29]
 80049b0:	f107 0120 	add.w	r1, r7, #32
 80049b4:	440a      	add	r2, r1
 80049b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80049c6:	bf00      	nop
 80049c8:	3724      	adds	r7, #36	; 0x24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	08004a70 	.word	0x08004a70
 80049d8:	08004a78 	.word	0x08004a78

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4e0d      	ldr	r6, [pc, #52]	; (8004a14 <__libc_init_array+0x38>)
 80049e0:	4c0d      	ldr	r4, [pc, #52]	; (8004a18 <__libc_init_array+0x3c>)
 80049e2:	1ba4      	subs	r4, r4, r6
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	2500      	movs	r5, #0
 80049e8:	42a5      	cmp	r5, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	4e0b      	ldr	r6, [pc, #44]	; (8004a1c <__libc_init_array+0x40>)
 80049ee:	4c0c      	ldr	r4, [pc, #48]	; (8004a20 <__libc_init_array+0x44>)
 80049f0:	f000 f82c 	bl	8004a4c <_init>
 80049f4:	1ba4      	subs	r4, r4, r6
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	2500      	movs	r5, #0
 80049fa:	42a5      	cmp	r5, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a04:	4798      	blx	r3
 8004a06:	3501      	adds	r5, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a0e:	4798      	blx	r3
 8004a10:	3501      	adds	r5, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	08004ab8 	.word	0x08004ab8
 8004a18:	08004ab8 	.word	0x08004ab8
 8004a1c:	08004ab8 	.word	0x08004ab8
 8004a20:	08004abc 	.word	0x08004abc

08004a24 <memcpy>:
 8004a24:	b510      	push	{r4, lr}
 8004a26:	1e43      	subs	r3, r0, #1
 8004a28:	440a      	add	r2, r1
 8004a2a:	4291      	cmp	r1, r2
 8004a2c:	d100      	bne.n	8004a30 <memcpy+0xc>
 8004a2e:	bd10      	pop	{r4, pc}
 8004a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a38:	e7f7      	b.n	8004a2a <memcpy+0x6>

08004a3a <memset>:
 8004a3a:	4402      	add	r2, r0
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d100      	bne.n	8004a44 <memset+0xa>
 8004a42:	4770      	bx	lr
 8004a44:	f803 1b01 	strb.w	r1, [r3], #1
 8004a48:	e7f9      	b.n	8004a3e <memset+0x4>
	...

08004a4c <_init>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr

08004a58 <_fini>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr
